#!/usr/bin/python
#===============================================================================
# NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
#===============================================================================
from rawbuf import *

def rb_create_sample_struct():
    return {
        "int8_val" : 0,
        "id_int8_val" : 0,
        "skip_int8_val" : False,
        "rb_has_int8_val" : False,
        "uint8_val" : 0,
        "id_uint8_val" : 1,
        "skip_uint8_val" : False,
        "rb_has_uint8_val" : False,
        "str_val" : "",
        "id_str_val" : 100,
        "skip_str_val" : False,
        "rb_has_str_val" : False,
        "str_arr_val" : [],
        "id_str_arr_val" : 2,
        "skip_str_arr_val" : False,
        "rb_has_str_arr_val" : False,
        "str_dict_val" : {},
        "id_str_dict_val" : 3,
        "skip_str_dict_val" : False,
        "rb_has_str_dict_val" : False
        }

def rb_eq_sample_struct(src, dst):
    if src["int8_val"] != dst["int8_val"]:
        return False
    if src["uint8_val"] != dst["uint8_val"]:
        return False
    if src["str_val"] != dst["str_val"]:
        return False
    if not rb_eq_string_array(src["str_arr_val"], dst["str_arr_val"]):
        return False
    if not rb_eq_string_dict(src["str_dict_val"], dst["str_dict_val"]):
        return False
    return True

def rb_fields_sample_struct(obj_val):
    fields = 0
    if not obj_val["skip_int8_val"]:
        fields = fields + 1
    if not obj_val["skip_uint8_val"]:
        fields = fields + 1
    if not obj_val["skip_str_val"]:
        fields = fields + 1
    if not obj_val["skip_str_arr_val"]:
        fields = fields + 1
    if not obj_val["skip_str_dict_val"]:
        fields = fields + 1
    return fields

def rb_sizeof_sample_struct(obj_val):
    fields = 0
    size = 0
    if not obj_val["skip_int8_val"]:
        size += rb_sizeof_int8(obj_val["int8_val"])
        fields = fields + 1
    if not obj_val["skip_uint8_val"]:
        size += rb_sizeof_uint8(obj_val["uint8_val"])
        fields = fields + 1
    if not obj_val["skip_str_val"]:
        size += rb_sizeof_string(obj_val["str_val"])
        fields = fields + 1
    if not obj_val["skip_str_arr_val"]:
        size += rb_sizeof_string_array(obj_val["str_arr_val"])
        fields = fields + 1
    if not obj_val["skip_str_dict_val"]:
        size += rb_sizeof_string_dict(obj_val["str_dict_val"])
        fields = fields + 1
    size += rb_seek_field_table_item(fields)
    size += sizeof_rb_buf_end
    return size

def rb_encode_sample_struct(obj_val, rb_val):
    buf = rb_nested_buf(rb_val, 0)
    if buf["size"] < 1:
        return False
    fields = rb_fields_sample_struct(obj_val)
    index = 0
    if not rb_set_field_count(fields, buf):
        return False
    if not obj_val["skip_int8_val"]:
        if not rb_set_field_table_item(index, obj_val["id_int8_val"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_int8(obj_val["int8_val"], buf):
            return False
        index = index + 1
    if not obj_val["skip_uint8_val"]:
        if not rb_set_field_table_item(index, obj_val["id_uint8_val"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_uint8(obj_val["uint8_val"], buf):
            return False
        index = index + 1
    if not obj_val["skip_str_val"]:
        if not rb_set_field_table_item(index, obj_val["id_str_val"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_string(obj_val["str_val"], buf):
            return False
        index = index + 1
    if not obj_val["skip_str_arr_val"]:
        if not rb_set_field_table_item(index, obj_val["id_str_arr_val"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_string_array(obj_val["str_arr_val"], buf):
            return False
        index = index + 1
    if not obj_val["skip_str_dict_val"]:
        if not rb_set_field_table_item(index, obj_val["id_str_dict_val"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_string_dict(obj_val["str_dict_val"], buf):
            return False
        index = index + 1

    if not rb_set_buf_size(buf["pos"] - buf["start"] + sizeof_rb_buf_end, buf):
        return False
    if not rb_encode_end(fields, buf):
        return False
    rb_val["pos"] = buf["pos"]

    return True

def __decode_sample_struct(id, offset, rb_val, obj_val):
    if id == obj_val["id_int8_val"]:
        (obj_val["int8_val"], rc) = rb_decode_int8(rb_val, offset)
        if rc: 
            obj_val["rb_has_int8_val"] = True
        return rc
    if id == obj_val["id_uint8_val"]:
        (obj_val["uint8_val"], rc) = rb_decode_uint8(rb_val, offset)
        if rc: 
            obj_val["rb_has_uint8_val"] = True
        return rc
    if id == obj_val["id_str_val"]:
        (obj_val["str_val"], rc) = rb_decode_string(rb_val, offset)
        if rc: 
            obj_val["rb_has_str_val"] = True
        return rc
    if id == obj_val["id_str_arr_val"]:
        (obj_val["str_arr_val"], rc) = rb_decode_string_array(rb_val, offset)
        if rc: 
            obj_val["rb_has_str_arr_val"] = True
        return rc
    if id == obj_val["id_str_dict_val"]:
        (obj_val["str_dict_val"], rc) = rb_decode_string_dict(rb_val, offset)
        if rc: 
            obj_val["rb_has_str_dict_val"] = True
        return rc
    return True

def rb_decode_sample_struct(rb_val, offset):
    buf = rb_nested_buf(rb_val, offset)
    if buf["size"] < 1:
        return (None, False)
    (size, fields) = rb_get_field_table_head(buf)
    if fields < 1 or not rb_check_code(buf, size, fields):
        return (None, False)
    obj_val = rb_create_sample_struct()
    for i in xrange(fields):
        (id, off, rc) = rb_get_field_table_item(i, buf)
        if not rc:
            return (None, False)
        if off >= size:
            return (None, False)
        if off > 0 and not __decode_sample_struct(id, off, buf, obj_val):
            return (None, False)
    return (obj_val, True)

def rb_dump_sample_struct(obj_val, path):
    size = rb_sizeof_sample_struct(obj_val)
    if size < 1:
        return False
    return rb_dump_buf(rb_encode_sample_struct, obj_val, size, path)

def rb_load_sample_struct(path):
    return rb_load_buf(path, rb_decode_sample_struct)

def rb_eq_sample_struct_array(src, dst):
    ssize = len(src)
    dsize = len(dst)
    if ssize != dsize:
        return False
    for i in xrange(ssize):
        if not rb_eq_sample_struct(src[i], dst[i]):
            return False
    return True

def rb_sizeof_sample_struct_array(obj_val):
    size = sizeof_rb_size + len(obj_val) * sizeof_rb_size
    for item in obj_val:
        size += rb_sizeof_sample_struct(item)
    return size

def rb_encode_sample_struct_array(obj_val, rb_val):
    buf = rb_nested_buf(rb_val, 0)
    if buf["size"] < 1:
        return False
    count = len(obj_val)
    if not rb_set_array_count(count, buf):
        return False
    i = 0
    for item in obj_val:
        if not rb_set_array_table_item(i, buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_sample_struct(item, buf):
            return False
        i = i + 1
    rb_val["pos"] = buf["pos"]
    return True

def rb_decode_sample_struct_array(rb_val, offset):
    obj_val = []
    buf = rb_nested_buf(rb_val, offset)
    if buf["size"] < 1:
        return (None, False)
    size = rb_get_array_count(buf)
    if size < 1:
        return (obj_val, True)
    rc = True
    for i in xrange(size):
        (off, ok) = rb_get_array_table_item(i, buf)
        if not ok:
            rc = False
            break
        (val, ok) = rb_decode_sample_struct(buf, off)
        if not ok:
            rc = False
            break
        obj_val.append(val)
    return (obj_val, rc)

def rb_eq_sample_struct_dict(src, dst):
    ssize = len(src)
    dsize = len(dst)
    if ssize != dsize:
        return False
    for key in src:
        if not key in dst:
            return False
        if not rb_eq_sample_struct(src[key], dst[key]):
            return False
    return True

def rb_sizeof_sample_struct_dict(obj_val):
    size = sizeof_rb_size + len(obj_val) * sizeof_rb_size
    for key in obj_val:
        size += rb_sizeof_string(key)
        size += rb_sizeof_sample_struct(obj_val[key])
    return size

def rb_encode_sample_struct_dict(obj_val, rb_val):
    buf = rb_nested_buf(rb_val, 0)
    if buf["size"] < 1:
        return False
    count = len(obj_val)
    if not rb_set_array_count(count, buf):
        return False
    i = 0
    for key in obj_val:
        if not rb_set_array_table_item(i, buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_string(key, buf):
            return False
        if not rb_encode_sample_struct(obj_val[key], buf):
            return False
        i = i + 1
    rb_val["pos"] = buf["pos"]
    return True

def rb_decode_sample_struct_dict(rb_val, offset):
    obj_val = {}
    buf = rb_nested_buf(rb_val, offset)
    if buf["size"] < 1:
        return (None, False)
    size = rb_get_array_count(buf)
    if size < 1:
        return (obj_val, True)
    rc = True
    for i in xrange(size):
        (off, ok) = rb_get_array_table_item(i, buf)
        if not ok:
            rc = False
            break
        (key, ok) = rb_decode_string(buf, off)
        if not ok:
            rc = False
            break
        delta = rb_sizeof_string(key)
        (val, ok) = rb_decode_sample_struct(buf, off + delta)
        if not ok:
            rc = False
            break
        obj_val[key] = val
    return (obj_val, rc)

def rb_create_sample_object():
    return {
        "obj" : rb_create_sample_struct(),
        "id_obj" : 0,
        "skip_obj" : False,
        "rb_has_obj" : False,
        "arr" : [],
        "id_arr" : 1,
        "skip_arr" : False,
        "rb_has_arr" : False,
        "dict" : {},
        "id_dict" : 2,
        "skip_dict" : False,
        "rb_has_dict" : False
        }

def rb_eq_sample_object(src, dst):
    if not rb_eq_sample_struct(src["obj"], dst["obj"]):
        return False
    if not rb_eq_sample_struct_array(src["arr"], dst["arr"]):
        return False
    if not rb_eq_sample_struct_dict(src["dict"], dst["dict"]):
        return False
    return True

def rb_fields_sample_object(obj_val):
    fields = 0
    if not obj_val["skip_obj"]:
        fields = fields + 1
    if not obj_val["skip_arr"]:
        fields = fields + 1
    if not obj_val["skip_dict"]:
        fields = fields + 1
    return fields

def rb_sizeof_sample_object(obj_val):
    fields = 0
    size = 0
    if not obj_val["skip_obj"]:
        size += rb_sizeof_sample_struct(obj_val["obj"])
        fields = fields + 1
    if not obj_val["skip_arr"]:
        size += rb_sizeof_sample_struct_array(obj_val["arr"])
        fields = fields + 1
    if not obj_val["skip_dict"]:
        size += rb_sizeof_sample_struct_dict(obj_val["dict"])
        fields = fields + 1
    size += rb_seek_field_table_item(fields)
    size += sizeof_rb_buf_end
    return size

def rb_encode_sample_object(obj_val, rb_val):
    buf = rb_nested_buf(rb_val, 0)
    if buf["size"] < 1:
        return False
    fields = rb_fields_sample_object(obj_val)
    index = 0
    if not rb_set_field_count(fields, buf):
        return False
    if not obj_val["skip_obj"]:
        if not rb_set_field_table_item(index, obj_val["id_obj"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_sample_struct(obj_val["obj"], buf):
            return False
        index = index + 1
    if not obj_val["skip_arr"]:
        if not rb_set_field_table_item(index, obj_val["id_arr"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_sample_struct_array(obj_val["arr"], buf):
            return False
        index = index + 1
    if not obj_val["skip_dict"]:
        if not rb_set_field_table_item(index, obj_val["id_dict"], buf["pos"] - buf["start"], buf):
            return False
        if not rb_encode_sample_struct_dict(obj_val["dict"], buf):
            return False
        index = index + 1

    if not rb_set_buf_size(buf["pos"] - buf["start"] + sizeof_rb_buf_end, buf):
        return False
    if not rb_encode_end(fields, buf):
        return False
    rb_val["pos"] = buf["pos"]

    return True

def __decode_sample_object(id, offset, rb_val, obj_val):
    if id == obj_val["id_obj"]:
        (obj_val["obj"], rc) = rb_decode_sample_struct(rb_val, offset)
        if rc: 
            obj_val["rb_has_obj"] = True
        return rc
    if id == obj_val["id_arr"]:
        (obj_val["arr"], rc) = rb_decode_sample_struct_array(rb_val, offset)
        if rc: 
            obj_val["rb_has_arr"] = True
        return rc
    if id == obj_val["id_dict"]:
        (obj_val["dict"], rc) = rb_decode_sample_struct_dict(rb_val, offset)
        if rc: 
            obj_val["rb_has_dict"] = True
        return rc
    return True

def rb_decode_sample_object(rb_val, offset):
    buf = rb_nested_buf(rb_val, offset)
    if buf["size"] < 1:
        return (None, False)
    (size, fields) = rb_get_field_table_head(buf)
    if fields < 1 or not rb_check_code(buf, size, fields):
        return (None, False)
    obj_val = rb_create_sample_object()
    for i in xrange(fields):
        (id, off, rc) = rb_get_field_table_item(i, buf)
        if not rc:
            return (None, False)
        if off >= size:
            return (None, False)
        if off > 0 and not __decode_sample_object(id, off, buf, obj_val):
            return (None, False)
    return (obj_val, True)

def rb_dump_sample_object(obj_val, path):
    size = rb_sizeof_sample_object(obj_val)
    if size < 1:
        return False
    return rb_dump_buf(rb_encode_sample_object, obj_val, size, path)

def rb_load_sample_object(path):
    return rb_load_buf(path, rb_decode_sample_object)

if __name__ == "__main__":
    pass