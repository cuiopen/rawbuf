<?php
////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
require_once "rawbuf_utils.php";

function rb_sizeof_bool($obj_val)
{
    return sizeof_bool;
}

function rb_sizeof_int8($obj_val)
{
    return sizeof_int8;
}

function rb_sizeof_uint8($obj_val)
{
    return sizeof_uint8;
}

function rb_sizeof_int16($obj_val)
{
    return sizeof_int16;
}

function rb_sizeof_uint16($obj_val)
{
    return sizeof_uint16;
}

function rb_sizeof_int32($obj_val)
{
    return sizeof_int32;
}

function rb_sizeof_uint32($obj_val)
{
    return sizeof_uint32;
}

function rb_sizeof_int64($obj_val)
{
    return sizeof_int64;
}

function rb_sizeof_uint64($obj_val)
{
    return sizeof_uint64;
}

function rb_sizeof_float($obj_val)
{
    return sizeof_float;
}

function rb_sizeof_double($obj_val)
{
    return sizeof_double;
}

function rb_encode_bool($obj_val, &$rb_val)
{
    $size = sizeof_bool;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_bool($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_int8($obj_val, &$rb_val)
{
    $size = sizeof_int8;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_int8($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_uint8($obj_val, &$rb_val)
{
    $size = sizeof_uint8;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_uint8($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_int16($obj_val, &$rb_val)
{
    $size = sizeof_int16;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_int16($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_uint16($obj_val, &$rb_val)
{
    $size = sizeof_uint16;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_uint16($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_int32($obj_val, &$rb_val)
{
    $size = sizeof_int32;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_int32($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_uint32($obj_val, &$rb_val)
{
    $size = sizeof_uint32;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_uint32($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_int64($obj_val, &$rb_val)
{
    $size = sizeof_int64;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_int64($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_uint64($obj_val, &$rb_val)
{
    $size = sizeof_uint64;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_uint64($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_float($obj_val, &$rb_val)
{
    $size = sizeof_float;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_float($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_encode_double($obj_val, &$rb_val)
{
    $size = sizeof_double;
    if (!rb_encode_check($rb_val, $size))
    {
        return false;
    }
    rb_set_double($obj_val, $rb_val["pos"], $rb_val);
    $rb_val["pos"] += $size;
    return true;
}

function rb_decode_bool(&$rb_val, $offset)
{
    $size = sizeof_bool;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_bool($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_int8(&$rb_val, $offset)
{
    $size = sizeof_int8;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_int8($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_uint8(&$rb_val, $offset)
{
    $size = sizeof_uint8;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_uint8($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_int16(&$rb_val, $offset)
{
    $size = sizeof_int16;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_int16($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_uint16(&$rb_val, $offset)
{
    $size = sizeof_uint16;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_uint16($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_int32(&$rb_val, $offset)
{
    $size = sizeof_int32;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_int32($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_uint32(&$rb_val, $offset)
{
    $size = sizeof_uint32;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_uint32($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_int64(&$rb_val, $offset)
{
    $size = sizeof_int64;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_int64($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_uint64(&$rb_val, $offset)
{
    $size = sizeof_uint64;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_uint64($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_float(&$rb_val, $offset)
{
    $size = sizeof_float;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_float($rb_val, $rb_val["start"] + $offset), true);
}

function rb_decode_double(&$rb_val, $offset)
{
    $size = sizeof_double;
    if (!rb_decode_check($rb_val, $offset, $size))
    {
        return array(null, false);
    }
    return array(rb_get_double($rb_val, $rb_val["start"] + $offset), true);
}

function rb_eq_bool_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_bool_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_bool($item);
    }
    return $size;
}

function rb_encode_bool_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_bool($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_bool_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_bool($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_int8_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int8_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_int8($item);
    }
    return $size;
}

function rb_encode_int8_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_int8($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int8_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_int8($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_uint8_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint8_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_uint8($item);
    }
    return $size;
}

function rb_encode_uint8_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_uint8($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint8_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_uint8($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_int16_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int16_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_int16($item);
    }
    return $size;
}

function rb_encode_int16_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_int16($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int16_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_int16($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_uint16_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint16_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_uint16($item);
    }
    return $size;
}

function rb_encode_uint16_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_uint16($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint16_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_uint16($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_int32_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int32_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_int32($item);
    }
    return $size;
}

function rb_encode_int32_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_int32($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int32_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_int32($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_uint32_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint32_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_uint32($item);
    }
    return $size;
}

function rb_encode_uint32_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_uint32($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint32_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_uint32($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_int64_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int64_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_int64($item);
    }
    return $size;
}

function rb_encode_int64_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_int64($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int64_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_int64($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_uint64_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint64_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_uint64($item);
    }
    return $size;
}

function rb_encode_uint64_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_uint64($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint64_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_uint64($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_float_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_float_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_float($item);
    }
    return $size;
}

function rb_encode_float_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_float($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_float_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_float($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_double_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_double_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_double($item);
    }
    return $size;
}

function rb_encode_double_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_double($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_double_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_double($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_string_array(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    for ($i = 0; $i < $ssize; $i++)
    {
        if ($src[$i] != $dst[$i])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_string_array(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $i => $item)
    {
        $size += rb_sizeof_string($item);
    }
    return $size;
}

function rb_encode_string_array(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    foreach($obj_val as $i => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($item, $buf))
        {
            return false;
        }
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_string_array(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($val, $ok) = rb_decode_string($buf, $off);
        if (!ok)
        {
            $rc = false;
            break;
        }
        array_push($obj_val, $val);
    }
    return array($obj_val, $rc);
}

function rb_eq_bool_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_bool_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_bool($item);
    }
    return $size;
}

function rb_encode_bool_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_bool($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_bool_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_bool($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_int8_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int8_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_int8($item);
    }
    return $size;
}

function rb_encode_int8_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_int8($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int8_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_int8($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_uint8_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint8_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_uint8($item);
    }
    return $size;
}

function rb_encode_uint8_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_uint8($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint8_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_uint8($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_int16_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int16_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_int16($item);
    }
    return $size;
}

function rb_encode_int16_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_int16($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int16_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_int16($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_uint16_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint16_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_uint16($item);
    }
    return $size;
}

function rb_encode_uint16_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_uint16($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint16_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_uint16($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_int32_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int32_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_int32($item);
    }
    return $size;
}

function rb_encode_int32_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_int32($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int32_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_int32($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_uint32_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint32_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_uint32($item);
    }
    return $size;
}

function rb_encode_uint32_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_uint32($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint32_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_uint32($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_int64_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_int64_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_int64($item);
    }
    return $size;
}

function rb_encode_int64_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_int64($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_int64_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_int64($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_uint64_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_uint64_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_uint64($item);
    }
    return $size;
}

function rb_encode_uint64_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_uint64($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_uint64_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_uint64($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_float_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_float_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_float($item);
    }
    return $size;
}

function rb_encode_float_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_float($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_float_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_float($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_double_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_double_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_double($item);
    }
    return $size;
}

function rb_encode_double_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_double($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_double_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_double($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

function rb_eq_string_dict(&$src, &$dst)
{
    $ssize = count($src);
    $dsize = count($dst);
    if ($ssize != $dsize)
    {
        return false;
    }
    foreach($src as $key => $item)
    {
        if (!isset($dst[$key]))
        {
            return false;
        }
        if ($item != $dst[$key])
        {
            return false;
        }
    }
    return true;
}

function rb_sizeof_string_dict(&$obj_val)
{
    $size = sizeof_rb_size + count($obj_val) * sizeof_rb_size;
    foreach($obj_val as $key => $item)
    {
        $size += rb_sizeof_string($key);
        $size += rb_sizeof_string($item);
    }
    return $size;
}

function rb_encode_string_dict(&$obj_val, &$rb_val)
{
    $buf = rb_nested_buf($rb_val, 0);
    if ($buf["size"] < 1)
    {
        return false;
    }
    $count = count($obj_val);
    if (!rb_set_array_count($count, $buf))
    {
        return false;
    }
    $i = 0;
    foreach($obj_val as $key => $item)
    {
        if (!rb_set_array_table_item($i, $buf["pos"] - $buf["start"], $buf))
        {
            return false;
        }
        if (!rb_encode_string($key, $buf))
        {
            return false;
        }
        if (!rb_encode_string($item, $buf))
        {
            return false;
        }
        $i = $i + 1;
    }
    $rb_val["pos"] = $buf["pos"];
    return true;
}

function rb_decode_string_dict(&$rb_val, $offset)
{
    $obj_val = array();
    $buf = rb_nested_buf($rb_val, $offset);
    if ($buf["size"] < 1)
    {
        return array(null, false);
    }
    $size = rb_get_array_count($buf);
    if ($size < 1)
    {
        return array($obj_val, true);
    }
    $rc = true;
    for ($i = 0; $i < $size; $i++)
    {
        list($off, $ok) = rb_get_array_table_item($i, $buf);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        list($key, $ok) = rb_decode_string($buf, $off);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $delta = rb_sizeof_string($key);
        list($val, $ok) = rb_decode_string($buf, $off + $delta);
        if (!$ok)
        {
            $rc = false;
            break;
        }
        $obj_val[$key] = $val;
    }
    return array($obj_val, $rc);
}

?>