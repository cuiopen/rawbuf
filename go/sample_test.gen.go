////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
package rawbuf

type Sample_struct_t struct {
	Int8_val     int8
	Uint8_val    uint8
	Str_val      string
	Str_arr_val  String_array_t
	Str_dict_val String_dict_t

	Id_int8_val     Rb_field_id_t
	Id_uint8_val    Rb_field_id_t
	Id_str_val      Rb_field_id_t
	Id_str_arr_val  Rb_field_id_t
	Id_str_dict_val Rb_field_id_t

	Skip_int8_val     bool
	Skip_uint8_val    bool
	Skip_str_val      bool
	Skip_str_arr_val  bool
	Skip_str_dict_val bool

	Rb_has_int8_val     bool
	Rb_has_uint8_val    bool
	Rb_has_str_val      bool
	Rb_has_str_arr_val  bool
	Rb_has_str_dict_val bool
}

type Sample_struct_array_t [](*Sample_struct_t)
type Sample_struct_dict_t map[string](*Sample_struct_t)

func Rb_init_sample_struct(obj_val *Sample_struct_t) {
	if nil == obj_val {
		return
	}

	Rb_init_int8(&obj_val.Int8_val)
	obj_val.Id_int8_val = 0
	obj_val.Skip_int8_val = false
	obj_val.Rb_has_int8_val = false

	Rb_init_uint8(&obj_val.Uint8_val)
	obj_val.Id_uint8_val = 1
	obj_val.Skip_uint8_val = false
	obj_val.Rb_has_uint8_val = false

	Rb_init_string(&obj_val.Str_val)
	obj_val.Id_str_val = 100
	obj_val.Skip_str_val = false
	obj_val.Rb_has_str_val = false

	Rb_init_string_array(&obj_val.Str_arr_val)
	obj_val.Id_str_arr_val = 2
	obj_val.Skip_str_arr_val = false
	obj_val.Rb_has_str_arr_val = false

	Rb_init_string_dict(&obj_val.Str_dict_val)
	obj_val.Id_str_dict_val = 3
	obj_val.Skip_str_dict_val = false
	obj_val.Rb_has_str_dict_val = false
}

func Rb_set_sample_struct(src *Sample_struct_t, dst *Sample_struct_t) bool {
	if nil == src || nil == dst {
		return false
	}
	dst.Id_int8_val = src.Id_int8_val
	dst.Id_uint8_val = src.Id_uint8_val
	dst.Id_str_val = src.Id_str_val
	dst.Id_str_arr_val = src.Id_str_arr_val
	dst.Id_str_dict_val = src.Id_str_dict_val
	if !Rb_set_int8(&src.Int8_val, &dst.Int8_val) {
		return false
	}
	if !Rb_set_uint8(&src.Uint8_val, &dst.Uint8_val) {
		return false
	}
	if !Rb_set_string(&src.Str_val, &dst.Str_val) {
		return false
	}
	if !Rb_set_string_array(&src.Str_arr_val, &dst.Str_arr_val) {
		return false
	}
	if !Rb_set_string_dict(&src.Str_dict_val, &dst.Str_dict_val) {
		return false
	}
	return true
}

func Rb_eq_sample_struct(src *Sample_struct_t, dst *Sample_struct_t) bool {
	if nil == src || nil == dst {
		return false
	}
	if !Rb_eq_int8(&src.Int8_val, &dst.Int8_val) {
		return false
	}
	if !Rb_eq_uint8(&src.Uint8_val, &dst.Uint8_val) {
		return false
	}
	if !Rb_eq_string(&src.Str_val, &dst.Str_val) {
		return false
	}
	if !Rb_eq_string_array(&src.Str_arr_val, &dst.Str_arr_val) {
		return false
	}
	if !Rb_eq_string_dict(&src.Str_dict_val, &dst.Str_dict_val) {
		return false
	}
	return true
}

func Rb_fields_sample_struct(obj_val *Sample_struct_t) Rb_field_size_t {
	fields := Rb_field_size_t(0)
	if !obj_val.Skip_int8_val {
		fields++
	}
	if !obj_val.Skip_uint8_val {
		fields++
	}
	if !obj_val.Skip_str_val {
		fields++
	}
	if !obj_val.Skip_str_arr_val {
		fields++
	}
	if !obj_val.Skip_str_dict_val {
		fields++
	}
	return fields
}

func Rb_sizeof_sample_struct(obj_val *Sample_struct_t) Rb_size_t {
	fields := Rb_field_size_t(0)
	size := Rb_size_t(0)
	if !obj_val.Skip_int8_val {
		size += Rb_sizeof_int8(&obj_val.Int8_val)
		fields++
	}
	if !obj_val.Skip_uint8_val {
		size += Rb_sizeof_uint8(&obj_val.Uint8_val)
		fields++
	}
	if !obj_val.Skip_str_val {
		size += Rb_sizeof_string(&obj_val.Str_val)
		fields++
	}
	if !obj_val.Skip_str_arr_val {
		size += Rb_sizeof_string_array(&obj_val.Str_arr_val)
		fields++
	}
	if !obj_val.Skip_str_dict_val {
		size += Rb_sizeof_string_dict(&obj_val.Str_dict_val)
		fields++
	}
	size += Rb_seek_field_table_item(fields)
	size += Sizeof_rb_buf_end
	return size
}

func Rb_encode_sample_struct(obj_val *Sample_struct_t, rb_val *Rb_buf_t) bool {
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	fields := Rb_field_size_t(Rb_fields_sample_struct(obj_val))
	index := Rb_field_size_t(0)
	if !Rb_set_field_count(fields, buf) {
		return false
	}

	if !obj_val.Skip_int8_val {
		if !Rb_set_field_table_item(index, obj_val.Id_int8_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int8(&obj_val.Int8_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_uint8_val {
		if !Rb_set_field_table_item(index, obj_val.Id_uint8_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint8(&obj_val.Uint8_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_str_val {
		if !Rb_set_field_table_item(index, obj_val.Id_str_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&obj_val.Str_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_str_arr_val {
		if !Rb_set_field_table_item(index, obj_val.Id_str_arr_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string_array(&obj_val.Str_arr_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_str_dict_val {
		if !Rb_set_field_table_item(index, obj_val.Id_str_dict_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string_dict(&obj_val.Str_dict_val, buf) {
			return false
		}
		index++
	}

	if !Rb_set_buf_size(buf.Pos-buf.Start+Sizeof_rb_buf_end, buf) {
		return false
	}
	if !Rb_encode_end(fields, buf) {
		return false
	}
	rb_val.Pos = buf.Pos

	return true
}

func __decode_sample_struct(
	item *Rb_field_table_item_t,
	rb_val *Rb_buf_t,
	obj_val *Sample_struct_t) bool {
	if item.Id == obj_val.Id_int8_val {
		rc := Rb_decode_int8(rb_val, item.Offset, &obj_val.Int8_val)
		if rc {
			obj_val.Rb_has_int8_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_uint8_val {
		rc := Rb_decode_uint8(rb_val, item.Offset, &obj_val.Uint8_val)
		if rc {
			obj_val.Rb_has_uint8_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_str_val {
		rc := Rb_decode_string(rb_val, item.Offset, &obj_val.Str_val)
		if rc {
			obj_val.Rb_has_str_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_str_arr_val {
		rc := Rb_decode_string_array(rb_val, item.Offset, &obj_val.Str_arr_val)
		if rc {
			obj_val.Rb_has_str_arr_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_str_dict_val {
		rc := Rb_decode_string_dict(rb_val, item.Offset, &obj_val.Str_dict_val)
		if rc {
			obj_val.Rb_has_str_dict_val = true
		}
		return rc
	}
	return true
}

func Rb_decode_sample_struct(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Sample_struct_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	head := Rb_get_field_table_head(buf)
	if head.Fields < 1 || !Rb_check_code(buf, head) {
		return false
	}
	item := Rb_field_table_item_t{}
	endoffset := Rb_offset_t(head.Size)
	for i := Rb_field_size_t(0); i < head.Fields; i++ {
		if !Rb_get_field_table_item(i, buf, &item) {
			return false
		}
		if item.Offset >= endoffset {
			return false
		}
		if item.Offset > 0 && !__decode_sample_struct(&item, buf, obj_val) {
			return false
		}
	}
	return true
}

func __dump_sample_struct(obj_val interface{}, buf *Rb_buf_t) bool {
	tmp_obj_val, ok := obj_val.(*Sample_struct_t)
	if !ok {
		return false
	}
	return Rb_encode_sample_struct(tmp_obj_val, buf)
}

func Rb_dump_sample_struct(obj_val *Sample_struct_t, path string) bool {
	if nil == obj_val {
		return false
	}
	size := Rb_sizeof_sample_struct(obj_val)
	if size < 1 {
		return false
	}
	return Rb_dump_buf(__dump_sample_struct, obj_val, size, path)
}

func __load_sample_struct(buf *Rb_buf_t, obj_val interface{}) bool {
	tmp_obj_val, ok := obj_val.(*Sample_struct_t)
	if !ok {
		return false
	}
	return Rb_decode_sample_struct(buf, 0, tmp_obj_val)
}

func Rb_load_sample_struct(path string, obj_val *Sample_struct_t) bool {
	return Rb_load_buf(path, __load_sample_struct, obj_val)
}

func Rb_init_sample_struct_array(obj_val *Sample_struct_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_sample_struct(val)
	}
}

func Rb_set_sample_struct_array(src *Sample_struct_array_t, dst *Sample_struct_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Sample_struct_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_sample_struct_array(src *Sample_struct_array_t, dst *Sample_struct_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_sample_struct(val, (*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_sample_struct_array(obj_val *Sample_struct_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_sample_struct(val)
	}
	return size
}

func Rb_encode_sample_struct_array(obj_val *Sample_struct_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_sample_struct(val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_sample_struct_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Sample_struct_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Sample_struct_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(Sample_struct_t)
		Rb_init_sample_struct(val)
		if !Rb_decode_sample_struct(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, val)
	}
	return rc
}

func Rb_init_sample_struct_dict(obj_val *Sample_struct_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_sample_struct(val)
	}
}

func Rb_set_sample_struct_dict(src *Sample_struct_dict_t, dst *Sample_struct_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Sample_struct_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_sample_struct_dict(src *Sample_struct_dict_t, dst *Sample_struct_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_sample_struct(val, tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_sample_struct_dict(obj_val *Sample_struct_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_sample_struct(val)
	}
	return size
}

func Rb_encode_sample_struct_dict(obj_val *Sample_struct_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_sample_struct(val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_sample_struct_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Sample_struct_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Sample_struct_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(Sample_struct_t)
		Rb_init_sample_struct(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_sample_struct(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = val
	}
	return rc
}

type Sample_object_t struct {
	Obj  Sample_struct_t
	Arr  Sample_struct_array_t
	Dict Sample_struct_dict_t

	Id_obj  Rb_field_id_t
	Id_arr  Rb_field_id_t
	Id_dict Rb_field_id_t

	Skip_obj  bool
	Skip_arr  bool
	Skip_dict bool

	Rb_has_obj  bool
	Rb_has_arr  bool
	Rb_has_dict bool
}

func Rb_init_sample_object(obj_val *Sample_object_t) {
	if nil == obj_val {
		return
	}

	Rb_init_sample_struct(&obj_val.Obj)
	obj_val.Id_obj = 0
	obj_val.Skip_obj = false
	obj_val.Rb_has_obj = false

	Rb_init_sample_struct_array(&obj_val.Arr)
	obj_val.Id_arr = 1
	obj_val.Skip_arr = false
	obj_val.Rb_has_arr = false

	Rb_init_sample_struct_dict(&obj_val.Dict)
	obj_val.Id_dict = 2
	obj_val.Skip_dict = false
	obj_val.Rb_has_dict = false
}

func Rb_set_sample_object(src *Sample_object_t, dst *Sample_object_t) bool {
	if nil == src || nil == dst {
		return false
	}
	dst.Id_obj = src.Id_obj
	dst.Id_arr = src.Id_arr
	dst.Id_dict = src.Id_dict
	if !Rb_set_sample_struct(&src.Obj, &dst.Obj) {
		return false
	}
	if !Rb_set_sample_struct_array(&src.Arr, &dst.Arr) {
		return false
	}
	if !Rb_set_sample_struct_dict(&src.Dict, &dst.Dict) {
		return false
	}
	return true
}

func Rb_eq_sample_object(src *Sample_object_t, dst *Sample_object_t) bool {
	if nil == src || nil == dst {
		return false
	}
	if !Rb_eq_sample_struct(&src.Obj, &dst.Obj) {
		return false
	}
	if !Rb_eq_sample_struct_array(&src.Arr, &dst.Arr) {
		return false
	}
	if !Rb_eq_sample_struct_dict(&src.Dict, &dst.Dict) {
		return false
	}
	return true
}

func Rb_fields_sample_object(obj_val *Sample_object_t) Rb_field_size_t {
	fields := Rb_field_size_t(0)
	if !obj_val.Skip_obj {
		fields++
	}
	if !obj_val.Skip_arr {
		fields++
	}
	if !obj_val.Skip_dict {
		fields++
	}
	return fields
}

func Rb_sizeof_sample_object(obj_val *Sample_object_t) Rb_size_t {
	fields := Rb_field_size_t(0)
	size := Rb_size_t(0)
	if !obj_val.Skip_obj {
		size += Rb_sizeof_sample_struct(&obj_val.Obj)
		fields++
	}
	if !obj_val.Skip_arr {
		size += Rb_sizeof_sample_struct_array(&obj_val.Arr)
		fields++
	}
	if !obj_val.Skip_dict {
		size += Rb_sizeof_sample_struct_dict(&obj_val.Dict)
		fields++
	}
	size += Rb_seek_field_table_item(fields)
	size += Sizeof_rb_buf_end
	return size
}

func Rb_encode_sample_object(obj_val *Sample_object_t, rb_val *Rb_buf_t) bool {
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	fields := Rb_field_size_t(Rb_fields_sample_object(obj_val))
	index := Rb_field_size_t(0)
	if !Rb_set_field_count(fields, buf) {
		return false
	}

	if !obj_val.Skip_obj {
		if !Rb_set_field_table_item(index, obj_val.Id_obj, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_sample_struct(&obj_val.Obj, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_arr {
		if !Rb_set_field_table_item(index, obj_val.Id_arr, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_sample_struct_array(&obj_val.Arr, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_dict {
		if !Rb_set_field_table_item(index, obj_val.Id_dict, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_sample_struct_dict(&obj_val.Dict, buf) {
			return false
		}
		index++
	}

	if !Rb_set_buf_size(buf.Pos-buf.Start+Sizeof_rb_buf_end, buf) {
		return false
	}
	if !Rb_encode_end(fields, buf) {
		return false
	}
	rb_val.Pos = buf.Pos

	return true
}

func __decode_sample_object(
	item *Rb_field_table_item_t,
	rb_val *Rb_buf_t,
	obj_val *Sample_object_t) bool {
	if item.Id == obj_val.Id_obj {
		rc := Rb_decode_sample_struct(rb_val, item.Offset, &obj_val.Obj)
		if rc {
			obj_val.Rb_has_obj = true
		}
		return rc
	}
	if item.Id == obj_val.Id_arr {
		rc := Rb_decode_sample_struct_array(rb_val, item.Offset, &obj_val.Arr)
		if rc {
			obj_val.Rb_has_arr = true
		}
		return rc
	}
	if item.Id == obj_val.Id_dict {
		rc := Rb_decode_sample_struct_dict(rb_val, item.Offset, &obj_val.Dict)
		if rc {
			obj_val.Rb_has_dict = true
		}
		return rc
	}
	return true
}

func Rb_decode_sample_object(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Sample_object_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	head := Rb_get_field_table_head(buf)
	if head.Fields < 1 || !Rb_check_code(buf, head) {
		return false
	}
	item := Rb_field_table_item_t{}
	endoffset := Rb_offset_t(head.Size)
	for i := Rb_field_size_t(0); i < head.Fields; i++ {
		if !Rb_get_field_table_item(i, buf, &item) {
			return false
		}
		if item.Offset >= endoffset {
			return false
		}
		if item.Offset > 0 && !__decode_sample_object(&item, buf, obj_val) {
			return false
		}
	}
	return true
}

func __dump_sample_object(obj_val interface{}, buf *Rb_buf_t) bool {
	tmp_obj_val, ok := obj_val.(*Sample_object_t)
	if !ok {
		return false
	}
	return Rb_encode_sample_object(tmp_obj_val, buf)
}

func Rb_dump_sample_object(obj_val *Sample_object_t, path string) bool {
	if nil == obj_val {
		return false
	}
	size := Rb_sizeof_sample_object(obj_val)
	if size < 1 {
		return false
	}
	return Rb_dump_buf(__dump_sample_object, obj_val, size, path)
}

func __load_sample_object(buf *Rb_buf_t, obj_val interface{}) bool {
	tmp_obj_val, ok := obj_val.(*Sample_object_t)
	if !ok {
		return false
	}
	return Rb_decode_sample_object(buf, 0, tmp_obj_val)
}

func Rb_load_sample_object(path string, obj_val *Sample_object_t) bool {
	return Rb_load_buf(path, __load_sample_object, obj_val)
}
