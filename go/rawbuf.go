////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
package rawbuf

func Rb_init_bool(obj_val *bool) {
	if nil != obj_val {
		*obj_val = false
	}
}

func Rb_init_int8(obj_val *int8) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_uint8(obj_val *uint8) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_int16(obj_val *int16) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_uint16(obj_val *uint16) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_int32(obj_val *int32) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_uint32(obj_val *uint32) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_int64(obj_val *int64) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_uint64(obj_val *uint64) {
	if nil != obj_val {
		*obj_val = 0
	}
}

func Rb_init_float32(obj_val *float32) {
	if nil != obj_val {
		*obj_val = 0.0
	}
}

func Rb_init_float64(obj_val *float64) {
	if nil != obj_val {
		*obj_val = 0.0
	}
}

func Rb_set_bool(src *bool, dst *bool) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_int8(src *int8, dst *int8) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_uint8(src *uint8, dst *uint8) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_int16(src *int16, dst *int16) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_uint16(src *uint16, dst *uint16) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_int32(src *int32, dst *int32) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_uint32(src *uint32, dst *uint32) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_int64(src *int64, dst *int64) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_uint64(src *uint64, dst *uint64) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_float32(src *float32, dst *float32) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_set_float64(src *float64, dst *float64) bool {
	if nil == src || nil == dst {
		return false
	}
	*dst = *src
	return true
}

func Rb_eq_bool(src *bool, dst *bool) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_int8(src *int8, dst *int8) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_uint8(src *uint8, dst *uint8) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_int16(src *int16, dst *int16) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_uint16(src *uint16, dst *uint16) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_int32(src *int32, dst *int32) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_uint32(src *uint32, dst *uint32) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_int64(src *int64, dst *int64) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_uint64(src *uint64, dst *uint64) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_float32(src *float32, dst *float32) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_eq_float64(src *float64, dst *float64) bool {
	if nil == src || nil == dst {
		return false
	}
	return *src == *dst
}

func Rb_sizeof_bool(obj_val *bool) Rb_size_t {
	return Sizeof_bool
}

func Rb_sizeof_int8(obj_val *int8) Rb_size_t {
	return Sizeof_int8
}

func Rb_sizeof_uint8(obj_val *uint8) Rb_size_t {
	return Sizeof_uint8
}

func Rb_sizeof_int16(obj_val *int16) Rb_size_t {
	return Sizeof_int16
}

func Rb_sizeof_uint16(obj_val *uint16) Rb_size_t {
	return Sizeof_uint16
}

func Rb_sizeof_int32(obj_val *int32) Rb_size_t {
	return Sizeof_int32
}

func Rb_sizeof_uint32(obj_val *uint32) Rb_size_t {
	return Sizeof_uint32
}

func Rb_sizeof_int64(obj_val *int64) Rb_size_t {
	return Sizeof_int64
}

func Rb_sizeof_uint64(obj_val *uint64) Rb_size_t {
	return Sizeof_uint64
}

func Rb_sizeof_float32(obj_val *float32) Rb_size_t {
	return Sizeof_float32
}

func Rb_sizeof_float64(obj_val *float64) Rb_size_t {
	return Sizeof_float64
}

func Rb_encode_bool(obj_val *bool, rb_val *Rb_buf_t) bool {
	size := Sizeof_bool
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_bool(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_int8(obj_val *int8, rb_val *Rb_buf_t) bool {
	size := Sizeof_int8
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_int8(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_uint8(obj_val *uint8, rb_val *Rb_buf_t) bool {
	size := Sizeof_uint8
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_uint8(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_int16(obj_val *int16, rb_val *Rb_buf_t) bool {
	size := Sizeof_int16
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_int16(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_uint16(obj_val *uint16, rb_val *Rb_buf_t) bool {
	size := Sizeof_uint16
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_uint16(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_int32(obj_val *int32, rb_val *Rb_buf_t) bool {
	size := Sizeof_int32
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_int32(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_uint32(obj_val *uint32, rb_val *Rb_buf_t) bool {
	size := Sizeof_uint32
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_uint32(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_int64(obj_val *int64, rb_val *Rb_buf_t) bool {
	size := Sizeof_int64
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_int64(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_uint64(obj_val *uint64, rb_val *Rb_buf_t) bool {
	size := Sizeof_uint64
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_uint64(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_float32(obj_val *float32, rb_val *Rb_buf_t) bool {
	size := Sizeof_float32
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_float32(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_encode_float64(obj_val *float64, rb_val *Rb_buf_t) bool {
	size := Sizeof_float64
	if nil == obj_val || !Rb_encode_check(rb_val, size) {
		return false
	}
	Set_float64(*obj_val, Rb_get_buf_from_pos(rb_val))
	rb_val.Pos += size
	return true
}

func Rb_decode_bool(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *bool) bool {
	size := Sizeof_bool
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_bool(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_int8(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *int8) bool {
	size := Sizeof_int8
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_int8(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_uint8(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *uint8) bool {
	size := Sizeof_uint8
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_uint8(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_int16(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *int16) bool {
	size := Sizeof_int16
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_int16(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_uint16(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *uint16) bool {
	size := Sizeof_uint16
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_uint16(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_int32(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *int32) bool {
	size := Sizeof_int32
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_int32(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_uint32(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *uint32) bool {
	size := Sizeof_uint32
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_uint32(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_int64(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *int64) bool {
	size := Sizeof_int64
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_int64(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_uint64(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *uint64) bool {
	size := Sizeof_uint64
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_uint64(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_float32(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *float32) bool {
	size := Sizeof_float32
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_float32(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

func Rb_decode_float64(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *float64) bool {
	size := Sizeof_float64
	if nil == obj_val || !Rb_decode_check(rb_val, offset, size) {
		return false
	}
	*obj_val = Get_float64(Rb_get_buf_from_offset(rb_val, rb_val.Start+Rb_size_t(offset)))
	return true
}

type Bool_array_t []bool

type Int8_array_t []int8

type Uint8_array_t []uint8

type Int16_array_t []int16

type Uint16_array_t []uint16

type Int32_array_t []int32

type Uint32_array_t []uint32

type Int64_array_t []int64

type Uint64_array_t []uint64

type Float32_array_t []float32

type Float64_array_t []float64

type String_array_t []string

func Rb_init_bool_array(obj_val *Bool_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_bool(&val)
	}
}

func Rb_set_bool_array(src *Bool_array_t, dst *Bool_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Bool_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_bool_array(src *Bool_array_t, dst *Bool_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_bool(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_bool_array(obj_val *Bool_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_bool(&val)
	}
	return size
}

func Rb_encode_bool_array(obj_val *Bool_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_bool(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_bool_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Bool_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Bool_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(bool)
		Rb_init_bool(val)
		if !Rb_decode_bool(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_int8_array(obj_val *Int8_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_int8(&val)
	}
}

func Rb_set_int8_array(src *Int8_array_t, dst *Int8_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int8_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_int8_array(src *Int8_array_t, dst *Int8_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_int8(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int8_array(obj_val *Int8_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_int8(&val)
	}
	return size
}

func Rb_encode_int8_array(obj_val *Int8_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int8(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int8_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int8_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int8_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int8)
		Rb_init_int8(val)
		if !Rb_decode_int8(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_uint8_array(obj_val *Uint8_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_uint8(&val)
	}
}

func Rb_set_uint8_array(src *Uint8_array_t, dst *Uint8_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint8_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_uint8_array(src *Uint8_array_t, dst *Uint8_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_uint8(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint8_array(obj_val *Uint8_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_uint8(&val)
	}
	return size
}

func Rb_encode_uint8_array(obj_val *Uint8_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint8(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint8_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint8_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint8_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint8)
		Rb_init_uint8(val)
		if !Rb_decode_uint8(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_int16_array(obj_val *Int16_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_int16(&val)
	}
}

func Rb_set_int16_array(src *Int16_array_t, dst *Int16_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int16_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_int16_array(src *Int16_array_t, dst *Int16_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_int16(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int16_array(obj_val *Int16_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_int16(&val)
	}
	return size
}

func Rb_encode_int16_array(obj_val *Int16_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int16(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int16_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int16_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int16_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int16)
		Rb_init_int16(val)
		if !Rb_decode_int16(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_uint16_array(obj_val *Uint16_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_uint16(&val)
	}
}

func Rb_set_uint16_array(src *Uint16_array_t, dst *Uint16_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint16_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_uint16_array(src *Uint16_array_t, dst *Uint16_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_uint16(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint16_array(obj_val *Uint16_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_uint16(&val)
	}
	return size
}

func Rb_encode_uint16_array(obj_val *Uint16_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint16(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint16_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint16_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint16_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint16)
		Rb_init_uint16(val)
		if !Rb_decode_uint16(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_int32_array(obj_val *Int32_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_int32(&val)
	}
}

func Rb_set_int32_array(src *Int32_array_t, dst *Int32_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int32_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_int32_array(src *Int32_array_t, dst *Int32_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_int32(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int32_array(obj_val *Int32_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_int32(&val)
	}
	return size
}

func Rb_encode_int32_array(obj_val *Int32_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int32(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int32_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int32_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int32_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int32)
		Rb_init_int32(val)
		if !Rb_decode_int32(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_uint32_array(obj_val *Uint32_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_uint32(&val)
	}
}

func Rb_set_uint32_array(src *Uint32_array_t, dst *Uint32_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint32_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_uint32_array(src *Uint32_array_t, dst *Uint32_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_uint32(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint32_array(obj_val *Uint32_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_uint32(&val)
	}
	return size
}

func Rb_encode_uint32_array(obj_val *Uint32_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint32(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint32_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint32_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint32_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint32)
		Rb_init_uint32(val)
		if !Rb_decode_uint32(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_int64_array(obj_val *Int64_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_int64(&val)
	}
}

func Rb_set_int64_array(src *Int64_array_t, dst *Int64_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int64_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_int64_array(src *Int64_array_t, dst *Int64_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_int64(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int64_array(obj_val *Int64_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_int64(&val)
	}
	return size
}

func Rb_encode_int64_array(obj_val *Int64_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int64(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int64_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int64_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int64_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int64)
		Rb_init_int64(val)
		if !Rb_decode_int64(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_uint64_array(obj_val *Uint64_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_uint64(&val)
	}
}

func Rb_set_uint64_array(src *Uint64_array_t, dst *Uint64_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint64_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_uint64_array(src *Uint64_array_t, dst *Uint64_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_uint64(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint64_array(obj_val *Uint64_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_uint64(&val)
	}
	return size
}

func Rb_encode_uint64_array(obj_val *Uint64_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint64(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint64_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint64_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint64_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint64)
		Rb_init_uint64(val)
		if !Rb_decode_uint64(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_float32_array(obj_val *Float32_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_float32(&val)
	}
}

func Rb_set_float32_array(src *Float32_array_t, dst *Float32_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Float32_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_float32_array(src *Float32_array_t, dst *Float32_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_float32(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_float32_array(obj_val *Float32_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_float32(&val)
	}
	return size
}

func Rb_encode_float32_array(obj_val *Float32_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_float32(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_float32_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Float32_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Float32_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(float32)
		Rb_init_float32(val)
		if !Rb_decode_float32(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_float64_array(obj_val *Float64_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_float64(&val)
	}
}

func Rb_set_float64_array(src *Float64_array_t, dst *Float64_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Float64_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_float64_array(src *Float64_array_t, dst *Float64_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_float64(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_float64_array(obj_val *Float64_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_float64(&val)
	}
	return size
}

func Rb_encode_float64_array(obj_val *Float64_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_float64(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_float64_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Float64_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Float64_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(float64)
		Rb_init_float64(val)
		if !Rb_decode_float64(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

func Rb_init_string_array(obj_val *String_array_t) {
	if nil == obj_val {
		return
	}
	for _, val := range *obj_val {
		Rb_init_string(&val)
	}
}

func Rb_set_string_array(src *String_array_t, dst *String_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = String_array_t{}
	for _, val := range *src {
		*dst = append(*dst, val)
	}
	return true
}

func Rb_eq_string_array(src *String_array_t, dst *String_array_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		if !Rb_eq_string(&val, &(*dst)[key]) {
			return false
		}
	}
	return true
}

func Rb_sizeof_string_array(obj_val *String_array_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for _, val := range *obj_val {
		size += Rb_sizeof_string(&val)
	}
	return size
}

func Rb_encode_string_array(obj_val *String_array_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for _, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_string_array(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *String_array_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = String_array_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(string)
		Rb_init_string(val)
		if !Rb_decode_string(buf, off, val) {
			rc = false
			break
		}
		*obj_val = append(*obj_val, *val)
	}
	return rc
}

type Bool_dict_t map[string]bool

type Int8_dict_t map[string]int8

type Uint8_dict_t map[string]uint8

type Int16_dict_t map[string]int16

type Uint16_dict_t map[string]uint16

type Int32_dict_t map[string]int32

type Uint32_dict_t map[string]uint32

type Int64_dict_t map[string]int64

type Uint64_dict_t map[string]uint64

type Float32_dict_t map[string]float32

type Float64_dict_t map[string]float64

type String_dict_t map[string]string

func Rb_init_bool_dict(obj_val *Bool_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_bool(&val)
	}
}

func Rb_set_bool_dict(src *Bool_dict_t, dst *Bool_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Bool_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_bool_dict(src *Bool_dict_t, dst *Bool_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_bool(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_bool_dict(obj_val *Bool_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_bool(&val)
	}
	return size
}

func Rb_encode_bool_dict(obj_val *Bool_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_bool(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_bool_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Bool_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Bool_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(bool)
		Rb_init_bool(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_bool(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_int8_dict(obj_val *Int8_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_int8(&val)
	}
}

func Rb_set_int8_dict(src *Int8_dict_t, dst *Int8_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int8_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_int8_dict(src *Int8_dict_t, dst *Int8_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_int8(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int8_dict(obj_val *Int8_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_int8(&val)
	}
	return size
}

func Rb_encode_int8_dict(obj_val *Int8_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_int8(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int8_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int8_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int8_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int8)
		Rb_init_int8(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_int8(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_uint8_dict(obj_val *Uint8_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_uint8(&val)
	}
}

func Rb_set_uint8_dict(src *Uint8_dict_t, dst *Uint8_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint8_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_uint8_dict(src *Uint8_dict_t, dst *Uint8_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_uint8(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint8_dict(obj_val *Uint8_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_uint8(&val)
	}
	return size
}

func Rb_encode_uint8_dict(obj_val *Uint8_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_uint8(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint8_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint8_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint8_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint8)
		Rb_init_uint8(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_uint8(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_int16_dict(obj_val *Int16_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_int16(&val)
	}
}

func Rb_set_int16_dict(src *Int16_dict_t, dst *Int16_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int16_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_int16_dict(src *Int16_dict_t, dst *Int16_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_int16(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int16_dict(obj_val *Int16_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_int16(&val)
	}
	return size
}

func Rb_encode_int16_dict(obj_val *Int16_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_int16(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int16_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int16_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int16_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int16)
		Rb_init_int16(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_int16(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_uint16_dict(obj_val *Uint16_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_uint16(&val)
	}
}

func Rb_set_uint16_dict(src *Uint16_dict_t, dst *Uint16_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint16_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_uint16_dict(src *Uint16_dict_t, dst *Uint16_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_uint16(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint16_dict(obj_val *Uint16_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_uint16(&val)
	}
	return size
}

func Rb_encode_uint16_dict(obj_val *Uint16_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_uint16(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint16_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint16_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint16_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint16)
		Rb_init_uint16(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_uint16(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_int32_dict(obj_val *Int32_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_int32(&val)
	}
}

func Rb_set_int32_dict(src *Int32_dict_t, dst *Int32_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int32_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_int32_dict(src *Int32_dict_t, dst *Int32_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_int32(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int32_dict(obj_val *Int32_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_int32(&val)
	}
	return size
}

func Rb_encode_int32_dict(obj_val *Int32_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_int32(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int32_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int32_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int32_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int32)
		Rb_init_int32(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_int32(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_uint32_dict(obj_val *Uint32_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_uint32(&val)
	}
}

func Rb_set_uint32_dict(src *Uint32_dict_t, dst *Uint32_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint32_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_uint32_dict(src *Uint32_dict_t, dst *Uint32_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_uint32(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint32_dict(obj_val *Uint32_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_uint32(&val)
	}
	return size
}

func Rb_encode_uint32_dict(obj_val *Uint32_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_uint32(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint32_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint32_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint32_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint32)
		Rb_init_uint32(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_uint32(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_int64_dict(obj_val *Int64_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_int64(&val)
	}
}

func Rb_set_int64_dict(src *Int64_dict_t, dst *Int64_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Int64_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_int64_dict(src *Int64_dict_t, dst *Int64_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_int64(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_int64_dict(obj_val *Int64_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_int64(&val)
	}
	return size
}

func Rb_encode_int64_dict(obj_val *Int64_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_int64(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_int64_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Int64_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Int64_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(int64)
		Rb_init_int64(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_int64(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_uint64_dict(obj_val *Uint64_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_uint64(&val)
	}
}

func Rb_set_uint64_dict(src *Uint64_dict_t, dst *Uint64_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Uint64_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_uint64_dict(src *Uint64_dict_t, dst *Uint64_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_uint64(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_uint64_dict(obj_val *Uint64_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_uint64(&val)
	}
	return size
}

func Rb_encode_uint64_dict(obj_val *Uint64_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_uint64(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_uint64_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Uint64_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Uint64_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(uint64)
		Rb_init_uint64(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_uint64(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_float32_dict(obj_val *Float32_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_float32(&val)
	}
}

func Rb_set_float32_dict(src *Float32_dict_t, dst *Float32_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Float32_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_float32_dict(src *Float32_dict_t, dst *Float32_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_float32(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_float32_dict(obj_val *Float32_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_float32(&val)
	}
	return size
}

func Rb_encode_float32_dict(obj_val *Float32_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_float32(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_float32_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Float32_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Float32_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(float32)
		Rb_init_float32(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_float32(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_float64_dict(obj_val *Float64_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_float64(&val)
	}
}

func Rb_set_float64_dict(src *Float64_dict_t, dst *Float64_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = Float64_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_float64_dict(src *Float64_dict_t, dst *Float64_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_float64(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_float64_dict(obj_val *Float64_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_float64(&val)
	}
	return size
}

func Rb_encode_float64_dict(obj_val *Float64_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_float64(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_float64_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Float64_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = Float64_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(float64)
		Rb_init_float64(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_float64(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}

func Rb_init_string_dict(obj_val *String_dict_t) {
	if nil == obj_val {
		return
	}
	for key, val := range *obj_val {
		Rb_init_string(&key)
		Rb_init_string(&val)
	}
}

func Rb_set_string_dict(src *String_dict_t, dst *String_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	if ssize < 1 {
		return true
	}
	*dst = String_dict_t{}
	for key, val := range *src {
		(*dst)[key] = val
	}
	return true
}

func Rb_eq_string_dict(src *String_dict_t, dst *String_dict_t) bool {
	if nil == src || nil == dst {
		return false
	}
	ssize := len(*src)
	dsize := len(*dst)
	if ssize != dsize {
		return false
	}
	for key, val := range *src {
		tmpval, ok := (*dst)[key]
		if !ok {
			return false
		}
		if !Rb_eq_string(&val, &tmpval) {
			return false
		}
	}
	return true
}

func Rb_sizeof_string_dict(obj_val *String_dict_t) Rb_size_t {
	size := Sizeof_rb_size + Rb_size_t(len(*obj_val))*Sizeof_rb_size
	for key, val := range *obj_val {
		size += Rb_sizeof_string(&key)
		size += Rb_sizeof_string(&val)
	}
	return size
}

func Rb_encode_string_dict(obj_val *String_dict_t, rb_val *Rb_buf_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	count := Rb_size_t(len(*obj_val))
	if !Rb_set_array_count(count, buf) {
		return false
	}
	i := Rb_size_t(0)
	for key, val := range *obj_val {
		if !Rb_set_array_table_item(i, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&key, buf) {
			return false
		}
		if !Rb_encode_string(&val, buf) {
			return false
		}
		i++
	}
	rb_val.Pos = buf.Pos
	return true
}

func Rb_decode_string_dict(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *String_dict_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	size := Rb_get_array_count(buf)
	if size < 1 {
		return true
	}

	*obj_val = String_dict_t{}

	rc := true
	ok := true
	off := Rb_offset_t(0)
	for i := Rb_size_t(0); i < size; i++ {
		if ok, off = Rb_get_array_table_item(i, buf); !ok {
			rc = false
			break
		}
		val := new(string)
		Rb_init_string(val)
		var key string
		if !Rb_decode_string(buf, off, &key) {
			rc = false
			break
		}
		delta := Rb_offset_t(Rb_sizeof_string(&key))
		if !Rb_decode_string(buf, off+delta, val) {
			rc = false
			break
		}
		(*obj_val)[key] = *val
	}
	return rc
}
