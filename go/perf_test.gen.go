////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
package rawbuf

type Perf_object_t struct {
	Bool_val   bool
	Int8_val   int8
	Uint8_val  uint8
	Int16_val  int16
	Uint16_val uint16
	Int32_val  int32
	Uint32_val uint32
	Int64_val  int64
	Uint64_val uint64
	Float_val  float32
	Double_val float64
	Str_val    string
	Vec_val    Int32_array_t
	Dict_val   String_dict_t

	Id_bool_val   Rb_field_id_t
	Id_int8_val   Rb_field_id_t
	Id_uint8_val  Rb_field_id_t
	Id_int16_val  Rb_field_id_t
	Id_uint16_val Rb_field_id_t
	Id_int32_val  Rb_field_id_t
	Id_uint32_val Rb_field_id_t
	Id_int64_val  Rb_field_id_t
	Id_uint64_val Rb_field_id_t
	Id_float_val  Rb_field_id_t
	Id_double_val Rb_field_id_t
	Id_str_val    Rb_field_id_t
	Id_vec_val    Rb_field_id_t
	Id_dict_val   Rb_field_id_t

	Skip_bool_val   bool
	Skip_int8_val   bool
	Skip_uint8_val  bool
	Skip_int16_val  bool
	Skip_uint16_val bool
	Skip_int32_val  bool
	Skip_uint32_val bool
	Skip_int64_val  bool
	Skip_uint64_val bool
	Skip_float_val  bool
	Skip_double_val bool
	Skip_str_val    bool
	Skip_vec_val    bool
	Skip_dict_val   bool

	Rb_has_bool_val   bool
	Rb_has_int8_val   bool
	Rb_has_uint8_val  bool
	Rb_has_int16_val  bool
	Rb_has_uint16_val bool
	Rb_has_int32_val  bool
	Rb_has_uint32_val bool
	Rb_has_int64_val  bool
	Rb_has_uint64_val bool
	Rb_has_float_val  bool
	Rb_has_double_val bool
	Rb_has_str_val    bool
	Rb_has_vec_val    bool
	Rb_has_dict_val   bool
}

func Rb_init_perf_object(obj_val *Perf_object_t) {
	if nil == obj_val {
		return
	}

	Rb_init_bool(&obj_val.Bool_val)
	obj_val.Id_bool_val = 0
	obj_val.Skip_bool_val = false
	obj_val.Rb_has_bool_val = false

	Rb_init_int8(&obj_val.Int8_val)
	obj_val.Id_int8_val = 1
	obj_val.Skip_int8_val = false
	obj_val.Rb_has_int8_val = false

	Rb_init_uint8(&obj_val.Uint8_val)
	obj_val.Id_uint8_val = 2
	obj_val.Skip_uint8_val = false
	obj_val.Rb_has_uint8_val = false

	Rb_init_int16(&obj_val.Int16_val)
	obj_val.Id_int16_val = 3
	obj_val.Skip_int16_val = false
	obj_val.Rb_has_int16_val = false

	Rb_init_uint16(&obj_val.Uint16_val)
	obj_val.Id_uint16_val = 4
	obj_val.Skip_uint16_val = false
	obj_val.Rb_has_uint16_val = false

	Rb_init_int32(&obj_val.Int32_val)
	obj_val.Id_int32_val = 5
	obj_val.Skip_int32_val = false
	obj_val.Rb_has_int32_val = false

	Rb_init_uint32(&obj_val.Uint32_val)
	obj_val.Id_uint32_val = 6
	obj_val.Skip_uint32_val = false
	obj_val.Rb_has_uint32_val = false

	Rb_init_int64(&obj_val.Int64_val)
	obj_val.Id_int64_val = 7
	obj_val.Skip_int64_val = false
	obj_val.Rb_has_int64_val = false

	Rb_init_uint64(&obj_val.Uint64_val)
	obj_val.Id_uint64_val = 8
	obj_val.Skip_uint64_val = false
	obj_val.Rb_has_uint64_val = false

	Rb_init_float32(&obj_val.Float_val)
	obj_val.Id_float_val = 9
	obj_val.Skip_float_val = false
	obj_val.Rb_has_float_val = false

	Rb_init_float64(&obj_val.Double_val)
	obj_val.Id_double_val = 10
	obj_val.Skip_double_val = false
	obj_val.Rb_has_double_val = false

	Rb_init_string(&obj_val.Str_val)
	obj_val.Id_str_val = 11
	obj_val.Skip_str_val = false
	obj_val.Rb_has_str_val = false

	Rb_init_int32_array(&obj_val.Vec_val)
	obj_val.Id_vec_val = 12
	obj_val.Skip_vec_val = false
	obj_val.Rb_has_vec_val = false

	Rb_init_string_dict(&obj_val.Dict_val)
	obj_val.Id_dict_val = 13
	obj_val.Skip_dict_val = false
	obj_val.Rb_has_dict_val = false
}

func Rb_set_perf_object(src *Perf_object_t, dst *Perf_object_t) bool {
	if nil == src || nil == dst {
		return false
	}
	dst.Id_bool_val = src.Id_bool_val
	dst.Id_int8_val = src.Id_int8_val
	dst.Id_uint8_val = src.Id_uint8_val
	dst.Id_int16_val = src.Id_int16_val
	dst.Id_uint16_val = src.Id_uint16_val
	dst.Id_int32_val = src.Id_int32_val
	dst.Id_uint32_val = src.Id_uint32_val
	dst.Id_int64_val = src.Id_int64_val
	dst.Id_uint64_val = src.Id_uint64_val
	dst.Id_float_val = src.Id_float_val
	dst.Id_double_val = src.Id_double_val
	dst.Id_str_val = src.Id_str_val
	dst.Id_vec_val = src.Id_vec_val
	dst.Id_dict_val = src.Id_dict_val
	if !Rb_set_bool(&src.Bool_val, &dst.Bool_val) {
		return false
	}
	if !Rb_set_int8(&src.Int8_val, &dst.Int8_val) {
		return false
	}
	if !Rb_set_uint8(&src.Uint8_val, &dst.Uint8_val) {
		return false
	}
	if !Rb_set_int16(&src.Int16_val, &dst.Int16_val) {
		return false
	}
	if !Rb_set_uint16(&src.Uint16_val, &dst.Uint16_val) {
		return false
	}
	if !Rb_set_int32(&src.Int32_val, &dst.Int32_val) {
		return false
	}
	if !Rb_set_uint32(&src.Uint32_val, &dst.Uint32_val) {
		return false
	}
	if !Rb_set_int64(&src.Int64_val, &dst.Int64_val) {
		return false
	}
	if !Rb_set_uint64(&src.Uint64_val, &dst.Uint64_val) {
		return false
	}
	if !Rb_set_float32(&src.Float_val, &dst.Float_val) {
		return false
	}
	if !Rb_set_float64(&src.Double_val, &dst.Double_val) {
		return false
	}
	if !Rb_set_string(&src.Str_val, &dst.Str_val) {
		return false
	}
	if !Rb_set_int32_array(&src.Vec_val, &dst.Vec_val) {
		return false
	}
	if !Rb_set_string_dict(&src.Dict_val, &dst.Dict_val) {
		return false
	}
	return true
}

func Rb_eq_perf_object(src *Perf_object_t, dst *Perf_object_t) bool {
	if nil == src || nil == dst {
		return false
	}
	if !Rb_eq_bool(&src.Bool_val, &dst.Bool_val) {
		return false
	}
	if !Rb_eq_int8(&src.Int8_val, &dst.Int8_val) {
		return false
	}
	if !Rb_eq_uint8(&src.Uint8_val, &dst.Uint8_val) {
		return false
	}
	if !Rb_eq_int16(&src.Int16_val, &dst.Int16_val) {
		return false
	}
	if !Rb_eq_uint16(&src.Uint16_val, &dst.Uint16_val) {
		return false
	}
	if !Rb_eq_int32(&src.Int32_val, &dst.Int32_val) {
		return false
	}
	if !Rb_eq_uint32(&src.Uint32_val, &dst.Uint32_val) {
		return false
	}
	if !Rb_eq_int64(&src.Int64_val, &dst.Int64_val) {
		return false
	}
	if !Rb_eq_uint64(&src.Uint64_val, &dst.Uint64_val) {
		return false
	}
	if !Rb_eq_float32(&src.Float_val, &dst.Float_val) {
		return false
	}
	if !Rb_eq_float64(&src.Double_val, &dst.Double_val) {
		return false
	}
	if !Rb_eq_string(&src.Str_val, &dst.Str_val) {
		return false
	}
	if !Rb_eq_int32_array(&src.Vec_val, &dst.Vec_val) {
		return false
	}
	if !Rb_eq_string_dict(&src.Dict_val, &dst.Dict_val) {
		return false
	}
	return true
}

func Rb_fields_perf_object(obj_val *Perf_object_t) Rb_field_size_t {
	fields := Rb_field_size_t(0)
	if !obj_val.Skip_bool_val {
		fields++
	}
	if !obj_val.Skip_int8_val {
		fields++
	}
	if !obj_val.Skip_uint8_val {
		fields++
	}
	if !obj_val.Skip_int16_val {
		fields++
	}
	if !obj_val.Skip_uint16_val {
		fields++
	}
	if !obj_val.Skip_int32_val {
		fields++
	}
	if !obj_val.Skip_uint32_val {
		fields++
	}
	if !obj_val.Skip_int64_val {
		fields++
	}
	if !obj_val.Skip_uint64_val {
		fields++
	}
	if !obj_val.Skip_float_val {
		fields++
	}
	if !obj_val.Skip_double_val {
		fields++
	}
	if !obj_val.Skip_str_val {
		fields++
	}
	if !obj_val.Skip_vec_val {
		fields++
	}
	if !obj_val.Skip_dict_val {
		fields++
	}
	return fields
}

func Rb_sizeof_perf_object(obj_val *Perf_object_t) Rb_size_t {
	fields := Rb_field_size_t(0)
	size := Rb_size_t(0)
	if !obj_val.Skip_bool_val {
		size += Rb_sizeof_bool(&obj_val.Bool_val)
		fields++
	}
	if !obj_val.Skip_int8_val {
		size += Rb_sizeof_int8(&obj_val.Int8_val)
		fields++
	}
	if !obj_val.Skip_uint8_val {
		size += Rb_sizeof_uint8(&obj_val.Uint8_val)
		fields++
	}
	if !obj_val.Skip_int16_val {
		size += Rb_sizeof_int16(&obj_val.Int16_val)
		fields++
	}
	if !obj_val.Skip_uint16_val {
		size += Rb_sizeof_uint16(&obj_val.Uint16_val)
		fields++
	}
	if !obj_val.Skip_int32_val {
		size += Rb_sizeof_int32(&obj_val.Int32_val)
		fields++
	}
	if !obj_val.Skip_uint32_val {
		size += Rb_sizeof_uint32(&obj_val.Uint32_val)
		fields++
	}
	if !obj_val.Skip_int64_val {
		size += Rb_sizeof_int64(&obj_val.Int64_val)
		fields++
	}
	if !obj_val.Skip_uint64_val {
		size += Rb_sizeof_uint64(&obj_val.Uint64_val)
		fields++
	}
	if !obj_val.Skip_float_val {
		size += Rb_sizeof_float32(&obj_val.Float_val)
		fields++
	}
	if !obj_val.Skip_double_val {
		size += Rb_sizeof_float64(&obj_val.Double_val)
		fields++
	}
	if !obj_val.Skip_str_val {
		size += Rb_sizeof_string(&obj_val.Str_val)
		fields++
	}
	if !obj_val.Skip_vec_val {
		size += Rb_sizeof_int32_array(&obj_val.Vec_val)
		fields++
	}
	if !obj_val.Skip_dict_val {
		size += Rb_sizeof_string_dict(&obj_val.Dict_val)
		fields++
	}
	size += Rb_seek_field_table_item(fields)
	size += Sizeof_rb_buf_end
	return size
}

func Rb_encode_perf_object(obj_val *Perf_object_t, rb_val *Rb_buf_t) bool {
	buf := Rb_nested_buf(rb_val, 0)
	if buf.Size < 1 {
		return false
	}
	fields := Rb_field_size_t(Rb_fields_perf_object(obj_val))
	index := Rb_field_size_t(0)
	if !Rb_set_field_count(fields, buf) {
		return false
	}

	if !obj_val.Skip_bool_val {
		if !Rb_set_field_table_item(index, obj_val.Id_bool_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_bool(&obj_val.Bool_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_int8_val {
		if !Rb_set_field_table_item(index, obj_val.Id_int8_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int8(&obj_val.Int8_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_uint8_val {
		if !Rb_set_field_table_item(index, obj_val.Id_uint8_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint8(&obj_val.Uint8_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_int16_val {
		if !Rb_set_field_table_item(index, obj_val.Id_int16_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int16(&obj_val.Int16_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_uint16_val {
		if !Rb_set_field_table_item(index, obj_val.Id_uint16_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint16(&obj_val.Uint16_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_int32_val {
		if !Rb_set_field_table_item(index, obj_val.Id_int32_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int32(&obj_val.Int32_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_uint32_val {
		if !Rb_set_field_table_item(index, obj_val.Id_uint32_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint32(&obj_val.Uint32_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_int64_val {
		if !Rb_set_field_table_item(index, obj_val.Id_int64_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int64(&obj_val.Int64_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_uint64_val {
		if !Rb_set_field_table_item(index, obj_val.Id_uint64_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_uint64(&obj_val.Uint64_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_float_val {
		if !Rb_set_field_table_item(index, obj_val.Id_float_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_float32(&obj_val.Float_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_double_val {
		if !Rb_set_field_table_item(index, obj_val.Id_double_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_float64(&obj_val.Double_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_str_val {
		if !Rb_set_field_table_item(index, obj_val.Id_str_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string(&obj_val.Str_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_vec_val {
		if !Rb_set_field_table_item(index, obj_val.Id_vec_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_int32_array(&obj_val.Vec_val, buf) {
			return false
		}
		index++
	}
	if !obj_val.Skip_dict_val {
		if !Rb_set_field_table_item(index, obj_val.Id_dict_val, Rb_offset_t(buf.Pos-buf.Start), buf) {
			return false
		}
		if !Rb_encode_string_dict(&obj_val.Dict_val, buf) {
			return false
		}
		index++
	}

	if !Rb_set_buf_size(buf.Pos-buf.Start+Sizeof_rb_buf_end, buf) {
		return false
	}
	if !Rb_encode_end(fields, buf) {
		return false
	}
	rb_val.Pos = buf.Pos

	return true
}

func __decode_perf_object(
	item *Rb_field_table_item_t,
	rb_val *Rb_buf_t,
	obj_val *Perf_object_t) bool {
	if item.Id == obj_val.Id_bool_val {
		rc := Rb_decode_bool(rb_val, item.Offset, &obj_val.Bool_val)
		if rc {
			obj_val.Rb_has_bool_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_int8_val {
		rc := Rb_decode_int8(rb_val, item.Offset, &obj_val.Int8_val)
		if rc {
			obj_val.Rb_has_int8_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_uint8_val {
		rc := Rb_decode_uint8(rb_val, item.Offset, &obj_val.Uint8_val)
		if rc {
			obj_val.Rb_has_uint8_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_int16_val {
		rc := Rb_decode_int16(rb_val, item.Offset, &obj_val.Int16_val)
		if rc {
			obj_val.Rb_has_int16_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_uint16_val {
		rc := Rb_decode_uint16(rb_val, item.Offset, &obj_val.Uint16_val)
		if rc {
			obj_val.Rb_has_uint16_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_int32_val {
		rc := Rb_decode_int32(rb_val, item.Offset, &obj_val.Int32_val)
		if rc {
			obj_val.Rb_has_int32_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_uint32_val {
		rc := Rb_decode_uint32(rb_val, item.Offset, &obj_val.Uint32_val)
		if rc {
			obj_val.Rb_has_uint32_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_int64_val {
		rc := Rb_decode_int64(rb_val, item.Offset, &obj_val.Int64_val)
		if rc {
			obj_val.Rb_has_int64_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_uint64_val {
		rc := Rb_decode_uint64(rb_val, item.Offset, &obj_val.Uint64_val)
		if rc {
			obj_val.Rb_has_uint64_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_float_val {
		rc := Rb_decode_float32(rb_val, item.Offset, &obj_val.Float_val)
		if rc {
			obj_val.Rb_has_float_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_double_val {
		rc := Rb_decode_float64(rb_val, item.Offset, &obj_val.Double_val)
		if rc {
			obj_val.Rb_has_double_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_str_val {
		rc := Rb_decode_string(rb_val, item.Offset, &obj_val.Str_val)
		if rc {
			obj_val.Rb_has_str_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_vec_val {
		rc := Rb_decode_int32_array(rb_val, item.Offset, &obj_val.Vec_val)
		if rc {
			obj_val.Rb_has_vec_val = true
		}
		return rc
	}
	if item.Id == obj_val.Id_dict_val {
		rc := Rb_decode_string_dict(rb_val, item.Offset, &obj_val.Dict_val)
		if rc {
			obj_val.Rb_has_dict_val = true
		}
		return rc
	}
	return true
}

func Rb_decode_perf_object(rb_val *Rb_buf_t, offset Rb_offset_t, obj_val *Perf_object_t) bool {
	if nil == obj_val {
		return false
	}
	buf := Rb_nested_buf(rb_val, offset)
	if buf.Size < 1 {
		return false
	}
	head := Rb_get_field_table_head(buf)
	if head.Fields < 1 || !Rb_check_code(buf, head) {
		return false
	}
	item := Rb_field_table_item_t{}
	endoffset := Rb_offset_t(head.Size)
	for i := Rb_field_size_t(0); i < head.Fields; i++ {
		if !Rb_get_field_table_item(i, buf, &item) {
			return false
		}
		if item.Offset >= endoffset {
			return false
		}
		if item.Offset > 0 && !__decode_perf_object(&item, buf, obj_val) {
			return false
		}
	}
	return true
}

func __dump_perf_object(obj_val interface{}, buf *Rb_buf_t) bool {
	tmp_obj_val, ok := obj_val.(*Perf_object_t)
	if !ok {
		return false
	}
	return Rb_encode_perf_object(tmp_obj_val, buf)
}

func Rb_dump_perf_object(obj_val *Perf_object_t, path string) bool {
	if nil == obj_val {
		return false
	}
	size := Rb_sizeof_perf_object(obj_val)
	if size < 1 {
		return false
	}
	return Rb_dump_buf(__dump_perf_object, obj_val, size, path)
}

func __load_perf_object(buf *Rb_buf_t, obj_val interface{}) bool {
	tmp_obj_val, ok := obj_val.(*Perf_object_t)
	if !ok {
		return false
	}
	return Rb_decode_perf_object(buf, 0, tmp_obj_val)
}

func Rb_load_perf_object(path string, obj_val *Perf_object_t) bool {
	return Rb_load_buf(path, __load_perf_object, obj_val)
}
