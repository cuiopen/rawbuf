#!/usr/bin/python
#===============================================================================
# NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
#===============================================================================
from rawbuf import *

class perf_object_t:
    def __init__(self):
        # fields
        self.bool_val = rb_bool_t()
        self.int8_val = rb_int8_t()
        self.uint8_val = rb_uint8_t()
        self.int16_val = rb_int16_t()
        self.uint16_val = rb_uint16_t()
        self.int32_val = rb_int32_t()
        self.uint32_val = rb_uint32_t()
        self.int64_val = rb_int64_t()
        self.uint64_val = rb_uint64_t()
        self.float_val = rb_float_t()
        self.double_val = rb_double_t()
        self.str_val = rb_string_t()
        self.vec_val = rb_list_t([rb_int32_t, None])
        self.dict_val = rb_dict_t([rb_string_t, None])
        # ids
        self.__id_bool_val = 0
        self.__id_int8_val = 1
        self.__id_uint8_val = 2
        self.__id_int16_val = 3
        self.__id_uint16_val = 4
        self.__id_int32_val = 5
        self.__id_uint32_val = 6
        self.__id_int64_val = 7
        self.__id_uint64_val = 8
        self.__id_float_val = 9
        self.__id_double_val = 10
        self.__id_str_val = 11
        self.__id_vec_val = 12
        self.__id_dict_val = 13
        # flags
        self.__skip_bool_val = False
        self.__skip_int8_val = False
        self.__skip_uint8_val = False
        self.__skip_int16_val = False
        self.__skip_uint16_val = False
        self.__skip_int32_val = False
        self.__skip_uint32_val = False
        self.__skip_int64_val = False
        self.__skip_uint64_val = False
        self.__skip_float_val = False
        self.__skip_double_val = False
        self.__skip_str_val = False
        self.__skip_vec_val = False
        self.__skip_dict_val = False
        self.__rb_has_bool_val = rb_bool_t()
        self.__rb_has_int8_val = rb_bool_t()
        self.__rb_has_uint8_val = rb_bool_t()
        self.__rb_has_int16_val = rb_bool_t()
        self.__rb_has_uint16_val = rb_bool_t()
        self.__rb_has_int32_val = rb_bool_t()
        self.__rb_has_uint32_val = rb_bool_t()
        self.__rb_has_int64_val = rb_bool_t()
        self.__rb_has_uint64_val = rb_bool_t()
        self.__rb_has_float_val = rb_bool_t()
        self.__rb_has_double_val = rb_bool_t()
        self.__rb_has_str_val = rb_bool_t()
        self.__rb_has_vec_val = rb_bool_t()
        self.__rb_has_dict_val = rb_bool_t()
    def skip_bool_val(self):
        self.__skip_bool_val = True
    def skip_int8_val(self):
        self.__skip_int8_val = True
    def skip_uint8_val(self):
        self.__skip_uint8_val = True
    def skip_int16_val(self):
        self.__skip_int16_val = True
    def skip_uint16_val(self):
        self.__skip_uint16_val = True
    def skip_int32_val(self):
        self.__skip_int32_val = True
    def skip_uint32_val(self):
        self.__skip_uint32_val = True
    def skip_int64_val(self):
        self.__skip_int64_val = True
    def skip_uint64_val(self):
        self.__skip_uint64_val = True
    def skip_float_val(self):
        self.__skip_float_val = True
    def skip_double_val(self):
        self.__skip_double_val = True
    def skip_str_val(self):
        self.__skip_str_val = True
    def skip_vec_val(self):
        self.__skip_vec_val = True
    def skip_dict_val(self):
        self.__skip_dict_val = True
    def rb_has_bool_val(self):
        return self.__rb_has_bool_val.val
    def rb_has_int8_val(self):
        return self.__rb_has_int8_val.val
    def rb_has_uint8_val(self):
        return self.__rb_has_uint8_val.val
    def rb_has_int16_val(self):
        return self.__rb_has_int16_val.val
    def rb_has_uint16_val(self):
        return self.__rb_has_uint16_val.val
    def rb_has_int32_val(self):
        return self.__rb_has_int32_val.val
    def rb_has_uint32_val(self):
        return self.__rb_has_uint32_val.val
    def rb_has_int64_val(self):
        return self.__rb_has_int64_val.val
    def rb_has_uint64_val(self):
        return self.__rb_has_uint64_val.val
    def rb_has_float_val(self):
        return self.__rb_has_float_val.val
    def rb_has_double_val(self):
        return self.__rb_has_double_val.val
    def rb_has_str_val(self):
        return self.__rb_has_str_val.val
    def rb_has_vec_val(self):
        return self.__rb_has_vec_val.val
    def rb_has_dict_val(self):
        return self.__rb_has_dict_val.val
    def __eq__(self, other):
        if not self.bool_val == other.bool_val:
            return False
        if not self.int8_val == other.int8_val:
            return False
        if not self.uint8_val == other.uint8_val:
            return False
        if not self.int16_val == other.int16_val:
            return False
        if not self.uint16_val == other.uint16_val:
            return False
        if not self.int32_val == other.int32_val:
            return False
        if not self.uint32_val == other.uint32_val:
            return False
        if not self.int64_val == other.int64_val:
            return False
        if not self.uint64_val == other.uint64_val:
            return False
        if not self.float_val == other.float_val:
            return False
        if not self.double_val == other.double_val:
            return False
        if not self.str_val == other.str_val:
            return False
        if not self.vec_val == other.vec_val:
            return False
        if not self.dict_val == other.dict_val:
            return False
        return True
    def reset(self):
        self.bool_val.reset()
        self.int8_val.reset()
        self.uint8_val.reset()
        self.int16_val.reset()
        self.uint16_val.reset()
        self.int32_val.reset()
        self.uint32_val.reset()
        self.int64_val.reset()
        self.uint64_val.reset()
        self.float_val.reset()
        self.double_val.reset()
        self.str_val.reset()
        self.vec_val.reset()
        self.dict_val.reset()
    def assign(self, other):
        self.bool_val.assign(other.bool_val)
        self.int8_val.assign(other.int8_val)
        self.uint8_val.assign(other.uint8_val)
        self.int16_val.assign(other.int16_val)
        self.uint16_val.assign(other.uint16_val)
        self.int32_val.assign(other.int32_val)
        self.uint32_val.assign(other.uint32_val)
        self.int64_val.assign(other.int64_val)
        self.uint64_val.assign(other.uint64_val)
        self.float_val.assign(other.float_val)
        self.double_val.assign(other.double_val)
        self.str_val.assign(other.str_val)
        self.vec_val.assign(other.vec_val)
        self.dict_val.assign(other.dict_val)
    def encode(self, buf):
        index = 0
        if not self.__skip_bool_val:
            if not rb_encode_field(index, self.__id_bool_val, self.bool_val, buf):
                return False
            index = index + 1
        if not self.__skip_int8_val:
            if not rb_encode_field(index, self.__id_int8_val, self.int8_val, buf):
                return False
            index = index + 1
        if not self.__skip_uint8_val:
            if not rb_encode_field(index, self.__id_uint8_val, self.uint8_val, buf):
                return False
            index = index + 1
        if not self.__skip_int16_val:
            if not rb_encode_field(index, self.__id_int16_val, self.int16_val, buf):
                return False
            index = index + 1
        if not self.__skip_uint16_val:
            if not rb_encode_field(index, self.__id_uint16_val, self.uint16_val, buf):
                return False
            index = index + 1
        if not self.__skip_int32_val:
            if not rb_encode_field(index, self.__id_int32_val, self.int32_val, buf):
                return False
            index = index + 1
        if not self.__skip_uint32_val:
            if not rb_encode_field(index, self.__id_uint32_val, self.uint32_val, buf):
                return False
            index = index + 1
        if not self.__skip_int64_val:
            if not rb_encode_field(index, self.__id_int64_val, self.int64_val, buf):
                return False
            index = index + 1
        if not self.__skip_uint64_val:
            if not rb_encode_field(index, self.__id_uint64_val, self.uint64_val, buf):
                return False
            index = index + 1
        if not self.__skip_float_val:
            if not rb_encode_field(index, self.__id_float_val, self.float_val, buf):
                return False
            index = index + 1
        if not self.__skip_double_val:
            if not rb_encode_field(index, self.__id_double_val, self.double_val, buf):
                return False
            index = index + 1
        if not self.__skip_str_val:
            if not rb_encode_field(index, self.__id_str_val, self.str_val, buf):
                return False
            index = index + 1
        if not self.__skip_vec_val:
            if not rb_encode_field(index, self.__id_vec_val, self.vec_val, buf):
                return False
            index = index + 1
        if not self.__skip_dict_val:
            if not rb_encode_field(index, self.__id_dict_val, self.dict_val, buf):
                return False
            index = index + 1
        return True
    def decode(self, id, offset, buf):
        rc = rb_bool_t(True)
        if rb_decode_field(self.__id_bool_val, id, offset, buf, rc, self.__rb_has_bool_val, self.bool_val):
            return rc.val
        if rb_decode_field(self.__id_int8_val, id, offset, buf, rc, self.__rb_has_int8_val, self.int8_val):
            return rc.val
        if rb_decode_field(self.__id_uint8_val, id, offset, buf, rc, self.__rb_has_uint8_val, self.uint8_val):
            return rc.val
        if rb_decode_field(self.__id_int16_val, id, offset, buf, rc, self.__rb_has_int16_val, self.int16_val):
            return rc.val
        if rb_decode_field(self.__id_uint16_val, id, offset, buf, rc, self.__rb_has_uint16_val, self.uint16_val):
            return rc.val
        if rb_decode_field(self.__id_int32_val, id, offset, buf, rc, self.__rb_has_int32_val, self.int32_val):
            return rc.val
        if rb_decode_field(self.__id_uint32_val, id, offset, buf, rc, self.__rb_has_uint32_val, self.uint32_val):
            return rc.val
        if rb_decode_field(self.__id_int64_val, id, offset, buf, rc, self.__rb_has_int64_val, self.int64_val):
            return rc.val
        if rb_decode_field(self.__id_uint64_val, id, offset, buf, rc, self.__rb_has_uint64_val, self.uint64_val):
            return rc.val
        if rb_decode_field(self.__id_float_val, id, offset, buf, rc, self.__rb_has_float_val, self.float_val):
            return rc.val
        if rb_decode_field(self.__id_double_val, id, offset, buf, rc, self.__rb_has_double_val, self.double_val):
            return rc.val
        if rb_decode_field(self.__id_str_val, id, offset, buf, rc, self.__rb_has_str_val, self.str_val):
            return rc.val
        if rb_decode_field(self.__id_vec_val, id, offset, buf, rc, self.__rb_has_vec_val, self.vec_val):
            return rc.val
        if rb_decode_field(self.__id_dict_val, id, offset, buf, rc, self.__rb_has_dict_val, self.dict_val):
            return rc.val
        return rc.val
    def rb_fields(self):
        fields = 0
        if not self.__skip_bool_val: fields = fields + 1
        if not self.__skip_int8_val: fields = fields + 1
        if not self.__skip_uint8_val: fields = fields + 1
        if not self.__skip_int16_val: fields = fields + 1
        if not self.__skip_uint16_val: fields = fields + 1
        if not self.__skip_int32_val: fields = fields + 1
        if not self.__skip_uint32_val: fields = fields + 1
        if not self.__skip_int64_val: fields = fields + 1
        if not self.__skip_uint64_val: fields = fields + 1
        if not self.__skip_float_val: fields = fields + 1
        if not self.__skip_double_val: fields = fields + 1
        if not self.__skip_str_val: fields = fields + 1
        if not self.__skip_vec_val: fields = fields + 1
        if not self.__skip_dict_val: fields = fields + 1
        return fields
    def rb_size(self):
        fields = 0
        size = 0
        if not self.__skip_bool_val:
            size += self.bool_val.rb_size()
            fields = fields + 1
        if not self.__skip_int8_val:
            size += self.int8_val.rb_size()
            fields = fields + 1
        if not self.__skip_uint8_val:
            size += self.uint8_val.rb_size()
            fields = fields + 1
        if not self.__skip_int16_val:
            size += self.int16_val.rb_size()
            fields = fields + 1
        if not self.__skip_uint16_val:
            size += self.uint16_val.rb_size()
            fields = fields + 1
        if not self.__skip_int32_val:
            size += self.int32_val.rb_size()
            fields = fields + 1
        if not self.__skip_uint32_val:
            size += self.uint32_val.rb_size()
            fields = fields + 1
        if not self.__skip_int64_val:
            size += self.int64_val.rb_size()
            fields = fields + 1
        if not self.__skip_uint64_val:
            size += self.uint64_val.rb_size()
            fields = fields + 1
        if not self.__skip_float_val:
            size += self.float_val.rb_size()
            fields = fields + 1
        if not self.__skip_double_val:
            size += self.double_val.rb_size()
            fields = fields + 1
        if not self.__skip_str_val:
            size += self.str_val.rb_size()
            fields = fields + 1
        if not self.__skip_vec_val:
            size += self.vec_val.rb_size()
            fields = fields + 1
        if not self.__skip_dict_val:
            size += self.dict_val.rb_size()
            fields = fields + 1
        size += rb_seek_field_table_item(fields)
        size += rb_buf_end_t.rb_size()
        return size
    def rb_encode(self, rb_val):
        return rb_encode_base(self, rb_val)
    def rb_decode(self, rb_val, offset):
        return rb_decode_base(rb_val, offset, self)
    def rb_dump(self, path):
        return rb_dump_base(self, path)
    def rb_load(self, path):
        return rb_load_base(path, self)

if __name__ == "__main__":
    pass