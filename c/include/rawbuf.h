////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __rawbuf_20160821090412_h__
#define __rawbuf_20160821090412_h__

#include "rawbuf_utils.h"

void rb_init_bool(rb_bool_t * obj_val);
void rb_init_int8(int8_t * obj_val);
void rb_init_uint8(uint8_t * obj_val);
void rb_init_int16(int16_t * obj_val);
void rb_init_uint16(uint16_t * obj_val);
void rb_init_int32(int32_t * obj_val);
void rb_init_uint32(uint32_t * obj_val);
void rb_init_int64(int64_t * obj_val);
void rb_init_uint64(uint64_t * obj_val);
void rb_init_float(float * obj_val);
void rb_init_double(double * obj_val);

rb_bool_t rb_set_bool(const rb_bool_t * src, rb_bool_t * dst);
rb_bool_t rb_set_int8(const int8_t * src, int8_t * dst);
rb_bool_t rb_set_uint8(const uint8_t * src, uint8_t * dst);
rb_bool_t rb_set_int16(const int16_t * src, int16_t * dst);
rb_bool_t rb_set_uint16(const uint16_t * src, uint16_t * dst);
rb_bool_t rb_set_int32(const int32_t * src, int32_t * dst);
rb_bool_t rb_set_uint32(const uint32_t * src, uint32_t * dst);
rb_bool_t rb_set_int64(const int64_t * src, int64_t * dst);
rb_bool_t rb_set_uint64(const uint64_t * src, uint64_t * dst);
rb_bool_t rb_set_float(const float * src, float * dst);
rb_bool_t rb_set_double(const double * src, double * dst);

rb_bool_t rb_eq_bool(const rb_bool_t * src, const rb_bool_t * dst);
rb_bool_t rb_eq_int8(const int8_t * src, const int8_t * dst);
rb_bool_t rb_eq_uint8(const uint8_t * src, const uint8_t * dst);
rb_bool_t rb_eq_int16(const int16_t * src, const int16_t * dst);
rb_bool_t rb_eq_uint16(const uint16_t * src, const uint16_t * dst);
rb_bool_t rb_eq_int32(const int32_t * src, const int32_t * dst);
rb_bool_t rb_eq_uint32(const uint32_t * src, const uint32_t * dst);
rb_bool_t rb_eq_int64(const int64_t * src, const int64_t * dst);
rb_bool_t rb_eq_uint64(const uint64_t * src, const uint64_t * dst);
rb_bool_t rb_eq_float(const float * src, const float * dst);
rb_bool_t rb_eq_double(const double * src, const double * dst);

void rb_dispose_bool(rb_bool_t * obj_val);
void rb_dispose_int8(int8_t * obj_val);
void rb_dispose_uint8(uint8_t * obj_val);
void rb_dispose_int16(int16_t * obj_val);
void rb_dispose_uint16(uint16_t * obj_val);
void rb_dispose_int32(int32_t * obj_val);
void rb_dispose_uint32(uint32_t * obj_val);
void rb_dispose_int64(int64_t * obj_val);
void rb_dispose_uint64(uint64_t * obj_val);
void rb_dispose_float(float * obj_val);
void rb_dispose_double(double * obj_val);

rb_size_t rb_sizeof_bool(const rb_bool_t * obj_val);
rb_size_t rb_sizeof_int8(const int8_t * obj_val);
rb_size_t rb_sizeof_uint8(const uint8_t * obj_val);
rb_size_t rb_sizeof_int16(const int16_t * obj_val);
rb_size_t rb_sizeof_uint16(const uint16_t * obj_val);
rb_size_t rb_sizeof_int32(const int32_t * obj_val);
rb_size_t rb_sizeof_uint32(const uint32_t * obj_val);
rb_size_t rb_sizeof_int64(const int64_t * obj_val);
rb_size_t rb_sizeof_uint64(const uint64_t * obj_val);
rb_size_t rb_sizeof_float(const float * obj_val);
rb_size_t rb_sizeof_double(const double * obj_val);

rb_bool_t rb_encode_bool(const rb_bool_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_int8(const int8_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_uint8(const uint8_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_int16(const int16_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_uint16(const uint16_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_int32(const int32_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_uint32(const uint32_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_int64(const int64_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_uint64(const uint64_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_float(const float * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_encode_double(const double * obj_val, rb_buf_t * rb_val);

rb_bool_t rb_decode_bool(const rb_buf_t * rb_val, rb_offset_t offset, rb_bool_t * obj_val);
rb_bool_t rb_decode_int8(const rb_buf_t * rb_val, rb_offset_t offset, int8_t * obj_val);
rb_bool_t rb_decode_uint8(const rb_buf_t * rb_val, rb_offset_t offset, uint8_t * obj_val);
rb_bool_t rb_decode_int16(const rb_buf_t * rb_val, rb_offset_t offset, int16_t * obj_val);
rb_bool_t rb_decode_uint16(const rb_buf_t * rb_val, rb_offset_t offset, uint16_t * obj_val);
rb_bool_t rb_decode_int32(const rb_buf_t * rb_val, rb_offset_t offset, int32_t * obj_val);
rb_bool_t rb_decode_uint32(const rb_buf_t * rb_val, rb_offset_t offset, uint32_t * obj_val);
rb_bool_t rb_decode_int64(const rb_buf_t * rb_val, rb_offset_t offset, int64_t * obj_val);
rb_bool_t rb_decode_uint64(const rb_buf_t * rb_val, rb_offset_t offset, uint64_t * obj_val);
rb_bool_t rb_decode_float(const rb_buf_t * rb_val, rb_offset_t offset, float * obj_val);
rb_bool_t rb_decode_double(const rb_buf_t * rb_val, rb_offset_t offset, double * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    rb_bool_t * arr;
} bool_array_t;

bool_array_t rb_create_bool_array(rb_size_t capacity);
rb_bool_t rb_append_to_bool_array(const rb_bool_t * item, bool_array_t * obj_val);
void rb_init_bool_array(bool_array_t * obj_val);
rb_bool_t rb_set_bool_array(const bool_array_t * src, bool_array_t * dst);
rb_bool_t rb_eq_bool_array(const bool_array_t * src, const bool_array_t * dst);
void rb_dispose_bool_array(bool_array_t * obj_val);
rb_size_t rb_sizeof_bool_array(const bool_array_t * obj_val);
rb_bool_t rb_encode_bool_array(const bool_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_bool_array(const rb_buf_t * rb_val, rb_offset_t offset, bool_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int8_t * arr;
} int8_array_t;

int8_array_t rb_create_int8_array(rb_size_t capacity);
rb_bool_t rb_append_to_int8_array(const int8_t * item, int8_array_t * obj_val);
void rb_init_int8_array(int8_array_t * obj_val);
rb_bool_t rb_set_int8_array(const int8_array_t * src, int8_array_t * dst);
rb_bool_t rb_eq_int8_array(const int8_array_t * src, const int8_array_t * dst);
void rb_dispose_int8_array(int8_array_t * obj_val);
rb_size_t rb_sizeof_int8_array(const int8_array_t * obj_val);
rb_bool_t rb_encode_int8_array(const int8_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int8_array(const rb_buf_t * rb_val, rb_offset_t offset, int8_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint8_t * arr;
} uint8_array_t;

uint8_array_t rb_create_uint8_array(rb_size_t capacity);
rb_bool_t rb_append_to_uint8_array(const uint8_t * item, uint8_array_t * obj_val);
void rb_init_uint8_array(uint8_array_t * obj_val);
rb_bool_t rb_set_uint8_array(const uint8_array_t * src, uint8_array_t * dst);
rb_bool_t rb_eq_uint8_array(const uint8_array_t * src, const uint8_array_t * dst);
void rb_dispose_uint8_array(uint8_array_t * obj_val);
rb_size_t rb_sizeof_uint8_array(const uint8_array_t * obj_val);
rb_bool_t rb_encode_uint8_array(const uint8_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint8_array(const rb_buf_t * rb_val, rb_offset_t offset, uint8_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int16_t * arr;
} int16_array_t;

int16_array_t rb_create_int16_array(rb_size_t capacity);
rb_bool_t rb_append_to_int16_array(const int16_t * item, int16_array_t * obj_val);
void rb_init_int16_array(int16_array_t * obj_val);
rb_bool_t rb_set_int16_array(const int16_array_t * src, int16_array_t * dst);
rb_bool_t rb_eq_int16_array(const int16_array_t * src, const int16_array_t * dst);
void rb_dispose_int16_array(int16_array_t * obj_val);
rb_size_t rb_sizeof_int16_array(const int16_array_t * obj_val);
rb_bool_t rb_encode_int16_array(const int16_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int16_array(const rb_buf_t * rb_val, rb_offset_t offset, int16_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint16_t * arr;
} uint16_array_t;

uint16_array_t rb_create_uint16_array(rb_size_t capacity);
rb_bool_t rb_append_to_uint16_array(const uint16_t * item, uint16_array_t * obj_val);
void rb_init_uint16_array(uint16_array_t * obj_val);
rb_bool_t rb_set_uint16_array(const uint16_array_t * src, uint16_array_t * dst);
rb_bool_t rb_eq_uint16_array(const uint16_array_t * src, const uint16_array_t * dst);
void rb_dispose_uint16_array(uint16_array_t * obj_val);
rb_size_t rb_sizeof_uint16_array(const uint16_array_t * obj_val);
rb_bool_t rb_encode_uint16_array(const uint16_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint16_array(const rb_buf_t * rb_val, rb_offset_t offset, uint16_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int32_t * arr;
} int32_array_t;

int32_array_t rb_create_int32_array(rb_size_t capacity);
rb_bool_t rb_append_to_int32_array(const int32_t * item, int32_array_t * obj_val);
void rb_init_int32_array(int32_array_t * obj_val);
rb_bool_t rb_set_int32_array(const int32_array_t * src, int32_array_t * dst);
rb_bool_t rb_eq_int32_array(const int32_array_t * src, const int32_array_t * dst);
void rb_dispose_int32_array(int32_array_t * obj_val);
rb_size_t rb_sizeof_int32_array(const int32_array_t * obj_val);
rb_bool_t rb_encode_int32_array(const int32_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int32_array(const rb_buf_t * rb_val, rb_offset_t offset, int32_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint32_t * arr;
} uint32_array_t;

uint32_array_t rb_create_uint32_array(rb_size_t capacity);
rb_bool_t rb_append_to_uint32_array(const uint32_t * item, uint32_array_t * obj_val);
void rb_init_uint32_array(uint32_array_t * obj_val);
rb_bool_t rb_set_uint32_array(const uint32_array_t * src, uint32_array_t * dst);
rb_bool_t rb_eq_uint32_array(const uint32_array_t * src, const uint32_array_t * dst);
void rb_dispose_uint32_array(uint32_array_t * obj_val);
rb_size_t rb_sizeof_uint32_array(const uint32_array_t * obj_val);
rb_bool_t rb_encode_uint32_array(const uint32_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint32_array(const rb_buf_t * rb_val, rb_offset_t offset, uint32_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int64_t * arr;
} int64_array_t;

int64_array_t rb_create_int64_array(rb_size_t capacity);
rb_bool_t rb_append_to_int64_array(const int64_t * item, int64_array_t * obj_val);
void rb_init_int64_array(int64_array_t * obj_val);
rb_bool_t rb_set_int64_array(const int64_array_t * src, int64_array_t * dst);
rb_bool_t rb_eq_int64_array(const int64_array_t * src, const int64_array_t * dst);
void rb_dispose_int64_array(int64_array_t * obj_val);
rb_size_t rb_sizeof_int64_array(const int64_array_t * obj_val);
rb_bool_t rb_encode_int64_array(const int64_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int64_array(const rb_buf_t * rb_val, rb_offset_t offset, int64_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint64_t * arr;
} uint64_array_t;

uint64_array_t rb_create_uint64_array(rb_size_t capacity);
rb_bool_t rb_append_to_uint64_array(const uint64_t * item, uint64_array_t * obj_val);
void rb_init_uint64_array(uint64_array_t * obj_val);
rb_bool_t rb_set_uint64_array(const uint64_array_t * src, uint64_array_t * dst);
rb_bool_t rb_eq_uint64_array(const uint64_array_t * src, const uint64_array_t * dst);
void rb_dispose_uint64_array(uint64_array_t * obj_val);
rb_size_t rb_sizeof_uint64_array(const uint64_array_t * obj_val);
rb_bool_t rb_encode_uint64_array(const uint64_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint64_array(const rb_buf_t * rb_val, rb_offset_t offset, uint64_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    float * arr;
} float_array_t;

float_array_t rb_create_float_array(rb_size_t capacity);
rb_bool_t rb_append_to_float_array(const float * item, float_array_t * obj_val);
void rb_init_float_array(float_array_t * obj_val);
rb_bool_t rb_set_float_array(const float_array_t * src, float_array_t * dst);
rb_bool_t rb_eq_float_array(const float_array_t * src, const float_array_t * dst);
void rb_dispose_float_array(float_array_t * obj_val);
rb_size_t rb_sizeof_float_array(const float_array_t * obj_val);
rb_bool_t rb_encode_float_array(const float_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_float_array(const rb_buf_t * rb_val, rb_offset_t offset, float_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    double * arr;
} double_array_t;

double_array_t rb_create_double_array(rb_size_t capacity);
rb_bool_t rb_append_to_double_array(const double * item, double_array_t * obj_val);
void rb_init_double_array(double_array_t * obj_val);
rb_bool_t rb_set_double_array(const double_array_t * src, double_array_t * dst);
rb_bool_t rb_eq_double_array(const double_array_t * src, const double_array_t * dst);
void rb_dispose_double_array(double_array_t * obj_val);
rb_size_t rb_sizeof_double_array(const double_array_t * obj_val);
rb_bool_t rb_encode_double_array(const double_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_double_array(const rb_buf_t * rb_val, rb_offset_t offset, double_array_t * obj_val);

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    rb_str_t * arr;
} string_array_t;

string_array_t rb_create_string_array(rb_size_t capacity);
rb_bool_t rb_append_to_string_array(const rb_str_t * item, string_array_t * obj_val);
void rb_init_string_array(string_array_t * obj_val);
rb_bool_t rb_set_string_array(const string_array_t * src, string_array_t * dst);
rb_bool_t rb_eq_string_array(const string_array_t * src, const string_array_t * dst);
void rb_dispose_string_array(string_array_t * obj_val);
rb_size_t rb_sizeof_string_array(const string_array_t * obj_val);
rb_bool_t rb_encode_string_array(const string_array_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_string_array(const rb_buf_t * rb_val, rb_offset_t offset, string_array_t * obj_val);

typedef struct
{
    rb_str_t key;
    rb_bool_t val;
} bool_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    bool_pair_t * arr;
} bool_dict_t;

bool_dict_t rb_create_bool_dict(rb_size_t capacity);
bool_pair_t * rb_bool_dict_get_item(const bool_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_bool_dict_set_item(const rb_str_t * key, const rb_bool_t * val, bool_dict_t * obj_val);
void rb_init_bool_dict(bool_dict_t * obj_val);
rb_bool_t rb_set_bool_dict(const bool_dict_t * src, bool_dict_t * dst);
rb_bool_t rb_eq_bool_dict(const bool_dict_t * src, const bool_dict_t * dst);
void rb_dispose_bool_dict(bool_dict_t * obj_val);
rb_size_t rb_sizeof_bool_dict(const bool_dict_t * obj_val);
rb_bool_t rb_encode_bool_dict(const bool_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_bool_dict(const rb_buf_t * rb_val, rb_offset_t offset, bool_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    int8_t val;
} int8_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int8_pair_t * arr;
} int8_dict_t;

int8_dict_t rb_create_int8_dict(rb_size_t capacity);
int8_pair_t * rb_int8_dict_get_item(const int8_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_int8_dict_set_item(const rb_str_t * key, const int8_t * val, int8_dict_t * obj_val);
void rb_init_int8_dict(int8_dict_t * obj_val);
rb_bool_t rb_set_int8_dict(const int8_dict_t * src, int8_dict_t * dst);
rb_bool_t rb_eq_int8_dict(const int8_dict_t * src, const int8_dict_t * dst);
void rb_dispose_int8_dict(int8_dict_t * obj_val);
rb_size_t rb_sizeof_int8_dict(const int8_dict_t * obj_val);
rb_bool_t rb_encode_int8_dict(const int8_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int8_dict(const rb_buf_t * rb_val, rb_offset_t offset, int8_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    uint8_t val;
} uint8_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint8_pair_t * arr;
} uint8_dict_t;

uint8_dict_t rb_create_uint8_dict(rb_size_t capacity);
uint8_pair_t * rb_uint8_dict_get_item(const uint8_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_uint8_dict_set_item(const rb_str_t * key, const uint8_t * val, uint8_dict_t * obj_val);
void rb_init_uint8_dict(uint8_dict_t * obj_val);
rb_bool_t rb_set_uint8_dict(const uint8_dict_t * src, uint8_dict_t * dst);
rb_bool_t rb_eq_uint8_dict(const uint8_dict_t * src, const uint8_dict_t * dst);
void rb_dispose_uint8_dict(uint8_dict_t * obj_val);
rb_size_t rb_sizeof_uint8_dict(const uint8_dict_t * obj_val);
rb_bool_t rb_encode_uint8_dict(const uint8_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint8_dict(const rb_buf_t * rb_val, rb_offset_t offset, uint8_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    int16_t val;
} int16_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int16_pair_t * arr;
} int16_dict_t;

int16_dict_t rb_create_int16_dict(rb_size_t capacity);
int16_pair_t * rb_int16_dict_get_item(const int16_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_int16_dict_set_item(const rb_str_t * key, const int16_t * val, int16_dict_t * obj_val);
void rb_init_int16_dict(int16_dict_t * obj_val);
rb_bool_t rb_set_int16_dict(const int16_dict_t * src, int16_dict_t * dst);
rb_bool_t rb_eq_int16_dict(const int16_dict_t * src, const int16_dict_t * dst);
void rb_dispose_int16_dict(int16_dict_t * obj_val);
rb_size_t rb_sizeof_int16_dict(const int16_dict_t * obj_val);
rb_bool_t rb_encode_int16_dict(const int16_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int16_dict(const rb_buf_t * rb_val, rb_offset_t offset, int16_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    uint16_t val;
} uint16_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint16_pair_t * arr;
} uint16_dict_t;

uint16_dict_t rb_create_uint16_dict(rb_size_t capacity);
uint16_pair_t * rb_uint16_dict_get_item(const uint16_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_uint16_dict_set_item(const rb_str_t * key, const uint16_t * val, uint16_dict_t * obj_val);
void rb_init_uint16_dict(uint16_dict_t * obj_val);
rb_bool_t rb_set_uint16_dict(const uint16_dict_t * src, uint16_dict_t * dst);
rb_bool_t rb_eq_uint16_dict(const uint16_dict_t * src, const uint16_dict_t * dst);
void rb_dispose_uint16_dict(uint16_dict_t * obj_val);
rb_size_t rb_sizeof_uint16_dict(const uint16_dict_t * obj_val);
rb_bool_t rb_encode_uint16_dict(const uint16_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint16_dict(const rb_buf_t * rb_val, rb_offset_t offset, uint16_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    int32_t val;
} int32_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int32_pair_t * arr;
} int32_dict_t;

int32_dict_t rb_create_int32_dict(rb_size_t capacity);
int32_pair_t * rb_int32_dict_get_item(const int32_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_int32_dict_set_item(const rb_str_t * key, const int32_t * val, int32_dict_t * obj_val);
void rb_init_int32_dict(int32_dict_t * obj_val);
rb_bool_t rb_set_int32_dict(const int32_dict_t * src, int32_dict_t * dst);
rb_bool_t rb_eq_int32_dict(const int32_dict_t * src, const int32_dict_t * dst);
void rb_dispose_int32_dict(int32_dict_t * obj_val);
rb_size_t rb_sizeof_int32_dict(const int32_dict_t * obj_val);
rb_bool_t rb_encode_int32_dict(const int32_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int32_dict(const rb_buf_t * rb_val, rb_offset_t offset, int32_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    uint32_t val;
} uint32_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint32_pair_t * arr;
} uint32_dict_t;

uint32_dict_t rb_create_uint32_dict(rb_size_t capacity);
uint32_pair_t * rb_uint32_dict_get_item(const uint32_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_uint32_dict_set_item(const rb_str_t * key, const uint32_t * val, uint32_dict_t * obj_val);
void rb_init_uint32_dict(uint32_dict_t * obj_val);
rb_bool_t rb_set_uint32_dict(const uint32_dict_t * src, uint32_dict_t * dst);
rb_bool_t rb_eq_uint32_dict(const uint32_dict_t * src, const uint32_dict_t * dst);
void rb_dispose_uint32_dict(uint32_dict_t * obj_val);
rb_size_t rb_sizeof_uint32_dict(const uint32_dict_t * obj_val);
rb_bool_t rb_encode_uint32_dict(const uint32_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint32_dict(const rb_buf_t * rb_val, rb_offset_t offset, uint32_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    int64_t val;
} int64_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    int64_pair_t * arr;
} int64_dict_t;

int64_dict_t rb_create_int64_dict(rb_size_t capacity);
int64_pair_t * rb_int64_dict_get_item(const int64_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_int64_dict_set_item(const rb_str_t * key, const int64_t * val, int64_dict_t * obj_val);
void rb_init_int64_dict(int64_dict_t * obj_val);
rb_bool_t rb_set_int64_dict(const int64_dict_t * src, int64_dict_t * dst);
rb_bool_t rb_eq_int64_dict(const int64_dict_t * src, const int64_dict_t * dst);
void rb_dispose_int64_dict(int64_dict_t * obj_val);
rb_size_t rb_sizeof_int64_dict(const int64_dict_t * obj_val);
rb_bool_t rb_encode_int64_dict(const int64_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_int64_dict(const rb_buf_t * rb_val, rb_offset_t offset, int64_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    uint64_t val;
} uint64_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    uint64_pair_t * arr;
} uint64_dict_t;

uint64_dict_t rb_create_uint64_dict(rb_size_t capacity);
uint64_pair_t * rb_uint64_dict_get_item(const uint64_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_uint64_dict_set_item(const rb_str_t * key, const uint64_t * val, uint64_dict_t * obj_val);
void rb_init_uint64_dict(uint64_dict_t * obj_val);
rb_bool_t rb_set_uint64_dict(const uint64_dict_t * src, uint64_dict_t * dst);
rb_bool_t rb_eq_uint64_dict(const uint64_dict_t * src, const uint64_dict_t * dst);
void rb_dispose_uint64_dict(uint64_dict_t * obj_val);
rb_size_t rb_sizeof_uint64_dict(const uint64_dict_t * obj_val);
rb_bool_t rb_encode_uint64_dict(const uint64_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_uint64_dict(const rb_buf_t * rb_val, rb_offset_t offset, uint64_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    float val;
} float_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    float_pair_t * arr;
} float_dict_t;

float_dict_t rb_create_float_dict(rb_size_t capacity);
float_pair_t * rb_float_dict_get_item(const float_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_float_dict_set_item(const rb_str_t * key, const float * val, float_dict_t * obj_val);
void rb_init_float_dict(float_dict_t * obj_val);
rb_bool_t rb_set_float_dict(const float_dict_t * src, float_dict_t * dst);
rb_bool_t rb_eq_float_dict(const float_dict_t * src, const float_dict_t * dst);
void rb_dispose_float_dict(float_dict_t * obj_val);
rb_size_t rb_sizeof_float_dict(const float_dict_t * obj_val);
rb_bool_t rb_encode_float_dict(const float_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_float_dict(const rb_buf_t * rb_val, rb_offset_t offset, float_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    double val;
} double_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    double_pair_t * arr;
} double_dict_t;

double_dict_t rb_create_double_dict(rb_size_t capacity);
double_pair_t * rb_double_dict_get_item(const double_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_double_dict_set_item(const rb_str_t * key, const double * val, double_dict_t * obj_val);
void rb_init_double_dict(double_dict_t * obj_val);
rb_bool_t rb_set_double_dict(const double_dict_t * src, double_dict_t * dst);
rb_bool_t rb_eq_double_dict(const double_dict_t * src, const double_dict_t * dst);
void rb_dispose_double_dict(double_dict_t * obj_val);
rb_size_t rb_sizeof_double_dict(const double_dict_t * obj_val);
rb_bool_t rb_encode_double_dict(const double_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_double_dict(const rb_buf_t * rb_val, rb_offset_t offset, double_dict_t * obj_val);

typedef struct
{
    rb_str_t key;
    rb_str_t val;
} string_pair_t;

typedef struct
{
    rb_size_t capacity;
    rb_size_t size;
    string_pair_t * arr;
} string_dict_t;

string_dict_t rb_create_string_dict(rb_size_t capacity);
string_pair_t * rb_string_dict_get_item(const string_dict_t * obj_val, const rb_str_t * key);
rb_bool_t rb_string_dict_set_item(const rb_str_t * key, const rb_str_t * val, string_dict_t * obj_val);
void rb_init_string_dict(string_dict_t * obj_val);
rb_bool_t rb_set_string_dict(const string_dict_t * src, string_dict_t * dst);
rb_bool_t rb_eq_string_dict(const string_dict_t * src, const string_dict_t * dst);
void rb_dispose_string_dict(string_dict_t * obj_val);
rb_size_t rb_sizeof_string_dict(const string_dict_t * obj_val);
rb_bool_t rb_encode_string_dict(const string_dict_t * obj_val, rb_buf_t * rb_val);
rb_bool_t rb_decode_string_dict(const rb_buf_t * rb_val, rb_offset_t offset, string_dict_t * obj_val);

#endif // __rawbuf_20160821090412_h__