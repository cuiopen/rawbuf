<?php
////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by rawbuf. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////

require_once "rawbuf.php";

class sample_struct_t
{
    // fields
    public $int8_val;
    public $uint8_val;
    public $str_val;
    public $str_arr_val;
    public $str_dict_val;
    // ids
    private $__id_int8_val;
    private $__id_uint8_val;
    private $__id_str_val;
    private $__id_str_arr_val;
    private $__id_str_dict_val;
    // flags
    private $__skip_int8_val;
    private $__skip_uint8_val;
    private $__skip_str_val;
    private $__skip_str_arr_val;
    private $__skip_str_dict_val;
    private $__rb_has_int8_val;
    private $__rb_has_uint8_val;
    private $__rb_has_str_val;
    private $__rb_has_str_arr_val;
    private $__rb_has_str_dict_val;
    public function __construct()
    {
        // fields
        $this->int8_val = new rb_int8_t();
        $this->uint8_val = new rb_uint8_t();
        $this->str_val = new rb_string_t();
        $this->str_arr_val = new rb_list_t(array(rb_string_t, null));
        $this->str_dict_val = new rb_dict_t(array(rb_string_t, null));
        // ids
        $this->__id_int8_val = 0;
        $this->__id_uint8_val = 1;
        $this->__id_str_val = 100;
        $this->__id_str_arr_val = 2;
        $this->__id_str_dict_val = 3;
        // flags
        $this->__skip_int8_val = false;
        $this->__skip_uint8_val = false;
        $this->__skip_str_val = false;
        $this->__skip_str_arr_val = false;
        $this->__skip_str_dict_val = false;
        $this->__rb_has_int8_val = new rb_bool_t();
        $this->__rb_has_uint8_val = new rb_bool_t();
        $this->__rb_has_str_val = new rb_bool_t();
        $this->__rb_has_str_arr_val = new rb_bool_t();
        $this->__rb_has_str_dict_val = new rb_bool_t();
    }
    public function skip_int8_val()
    {
        $this->__skip_int8_val = true;
    }
    public function skip_uint8_val()
    {
        $this->__skip_uint8_val = true;
    }
    public function skip_str_val()
    {
        $this->__skip_str_val = true;
    }
    public function skip_str_arr_val()
    {
        $this->__skip_str_arr_val = true;
    }
    public function skip_str_dict_val()
    {
        $this->__skip_str_dict_val = true;
    }
    public function rb_has_int8_val()
    {
        return $this->__rb_has_int8_val->val;
    }
    public function rb_has_uint8_val()
    {
        return $this->__rb_has_uint8_val->val;
    }
    public function rb_has_str_val()
    {
        return $this->__rb_has_str_val->val;
    }
    public function rb_has_str_arr_val()
    {
        return $this->__rb_has_str_arr_val->val;
    }
    public function rb_has_str_dict_val()
    {
        return $this->__rb_has_str_dict_val->val;
    }
    public function eq($other)
    {
        if (!$this->int8_val->eq($other->int8_val)) return false;
        if (!$this->uint8_val->eq($other->uint8_val)) return false;
        if (!$this->str_val->eq($other->str_val)) return false;
        if (!$this->str_arr_val->eq($other->str_arr_val)) return false;
        if (!$this->str_dict_val->eq($other->str_dict_val)) return false;
        return true;
    }
    public function reset()
    {
        $this->int8_val->reset();
        $this->uint8_val->reset();
        $this->str_val->reset();
        $this->str_arr_val->reset();
        $this->str_dict_val->reset();
    }
    public function assign($other)
    {
        $this->int8_val->assign($other->int8_val);
        $this->uint8_val->assign($other->uint8_val);
        $this->str_val->assign($other->str_val);
        $this->str_arr_val->assign($other->str_arr_val);
        $this->str_dict_val->assign($other->str_dict_val);
    }
    public function encode($buf)
    {
        $index = 0;
        if (!$this->__skip_int8_val && !rb_encode_field($index++, $this->__id_int8_val, $this->int8_val, $buf)) return false;
        if (!$this->__skip_uint8_val && !rb_encode_field($index++, $this->__id_uint8_val, $this->uint8_val, $buf)) return false;
        if (!$this->__skip_str_val && !rb_encode_field($index++, $this->__id_str_val, $this->str_val, $buf)) return false;
        if (!$this->__skip_str_arr_val && !rb_encode_field($index++, $this->__id_str_arr_val, $this->str_arr_val, $buf)) return false;
        if (!$this->__skip_str_dict_val && !rb_encode_field($index++, $this->__id_str_dict_val, $this->str_dict_val, $buf)) return false;
        return true;
    }
    public function decode($id, $offset, $buf)
    {
        $rc = new rb_bool_t(true);
        if (rb_decode_field($this->__id_int8_val, $id, $offset, $buf, $rc, $this->__rb_has_int8_val, $this->int8_val)) return $rc->val;
        if (rb_decode_field($this->__id_uint8_val, $id, $offset, $buf, $rc, $this->__rb_has_uint8_val, $this->uint8_val)) return $rc->val;
        if (rb_decode_field($this->__id_str_val, $id, $offset, $buf, $rc, $this->__rb_has_str_val, $this->str_val)) return $rc->val;
        if (rb_decode_field($this->__id_str_arr_val, $id, $offset, $buf, $rc, $this->__rb_has_str_arr_val, $this->str_arr_val)) return $rc->val;
        if (rb_decode_field($this->__id_str_dict_val, $id, $offset, $buf, $rc, $this->__rb_has_str_dict_val, $this->str_dict_val)) return $rc->val;
        return $rc->val;
    }
    public function rb_fields()
    {
        $fields = 0;
        if (!$this->__skip_int8_val) $fields++;
        if (!$this->__skip_uint8_val) $fields++;
        if (!$this->__skip_str_val) $fields++;
        if (!$this->__skip_str_arr_val) $fields++;
        if (!$this->__skip_str_dict_val) $fields++;
        return $fields;
    }
    public function rb_size()
    {
        $fields = 0;
        $size = 0;
        if (!$this->__skip_int8_val)
        {
            $size += $this->int8_val->rb_size();
            $fields++;
        }
        if (!$this->__skip_uint8_val)
        {
            $size += $this->uint8_val->rb_size();
            $fields++;
        }
        if (!$this->__skip_str_val)
        {
            $size += $this->str_val->rb_size();
            $fields++;
        }
        if (!$this->__skip_str_arr_val)
        {
            $size += $this->str_arr_val->rb_size();
            $fields++;
        }
        if (!$this->__skip_str_dict_val)
        {
            $size += $this->str_dict_val->rb_size();
            $fields++;
        }
        $size += rb_seek_field_table_item($fields);
        $size += rb_scalar_t::rb_size(rb_buf_end_t);
        return $size;
    }
    public function rb_encode($rb_val)
    {
        return rb_encode_base($this, $rb_val);
    }
    public function rb_decode($rb_val, $offset)
    {
        return rb_decode_base($rb_val, $offset, $this);
    }
    public function rb_dump($path)
    {
        return rb_dump_base($this, $path);
    }
    public function rb_load($path)
    {
        return rb_load_base($path, $this);
    }
}

class sample_object_t
{
    // fields
    public $obj;
    public $arr;
    public $dict;
    // ids
    private $__id_obj;
    private $__id_arr;
    private $__id_dict;
    // flags
    private $__skip_obj;
    private $__skip_arr;
    private $__skip_dict;
    private $__rb_has_obj;
    private $__rb_has_arr;
    private $__rb_has_dict;
    public function __construct()
    {
        // fields
        $this->obj = new sample_struct_t();
        $this->arr = new rb_list_t(array(sample_struct_t, null));
        $this->dict = new rb_dict_t(array(sample_struct_t, null));
        // ids
        $this->__id_obj = 0;
        $this->__id_arr = 1;
        $this->__id_dict = 2;
        // flags
        $this->__skip_obj = false;
        $this->__skip_arr = false;
        $this->__skip_dict = false;
        $this->__rb_has_obj = new rb_bool_t();
        $this->__rb_has_arr = new rb_bool_t();
        $this->__rb_has_dict = new rb_bool_t();
    }
    public function skip_obj()
    {
        $this->__skip_obj = true;
    }
    public function skip_arr()
    {
        $this->__skip_arr = true;
    }
    public function skip_dict()
    {
        $this->__skip_dict = true;
    }
    public function rb_has_obj()
    {
        return $this->__rb_has_obj->val;
    }
    public function rb_has_arr()
    {
        return $this->__rb_has_arr->val;
    }
    public function rb_has_dict()
    {
        return $this->__rb_has_dict->val;
    }
    public function eq($other)
    {
        if (!$this->obj->eq($other->obj)) return false;
        if (!$this->arr->eq($other->arr)) return false;
        if (!$this->dict->eq($other->dict)) return false;
        return true;
    }
    public function reset()
    {
        $this->obj->reset();
        $this->arr->reset();
        $this->dict->reset();
    }
    public function assign($other)
    {
        $this->obj->assign($other->obj);
        $this->arr->assign($other->arr);
        $this->dict->assign($other->dict);
    }
    public function encode($buf)
    {
        $index = 0;
        if (!$this->__skip_obj && !rb_encode_field($index++, $this->__id_obj, $this->obj, $buf)) return false;
        if (!$this->__skip_arr && !rb_encode_field($index++, $this->__id_arr, $this->arr, $buf)) return false;
        if (!$this->__skip_dict && !rb_encode_field($index++, $this->__id_dict, $this->dict, $buf)) return false;
        return true;
    }
    public function decode($id, $offset, $buf)
    {
        $rc = new rb_bool_t(true);
        if (rb_decode_field($this->__id_obj, $id, $offset, $buf, $rc, $this->__rb_has_obj, $this->obj)) return $rc->val;
        if (rb_decode_field($this->__id_arr, $id, $offset, $buf, $rc, $this->__rb_has_arr, $this->arr)) return $rc->val;
        if (rb_decode_field($this->__id_dict, $id, $offset, $buf, $rc, $this->__rb_has_dict, $this->dict)) return $rc->val;
        return $rc->val;
    }
    public function rb_fields()
    {
        $fields = 0;
        if (!$this->__skip_obj) $fields++;
        if (!$this->__skip_arr) $fields++;
        if (!$this->__skip_dict) $fields++;
        return $fields;
    }
    public function rb_size()
    {
        $fields = 0;
        $size = 0;
        if (!$this->__skip_obj)
        {
            $size += $this->obj->rb_size();
            $fields++;
        }
        if (!$this->__skip_arr)
        {
            $size += $this->arr->rb_size();
            $fields++;
        }
        if (!$this->__skip_dict)
        {
            $size += $this->dict->rb_size();
            $fields++;
        }
        $size += rb_seek_field_table_item($fields);
        $size += rb_scalar_t::rb_size(rb_buf_end_t);
        return $size;
    }
    public function rb_encode($rb_val)
    {
        return rb_encode_base($this, $rb_val);
    }
    public function rb_decode($rb_val, $offset)
    {
        return rb_decode_base($rb_val, $offset, $this);
    }
    public function rb_dump($path)
    {
        return rb_dump_base($this, $path);
    }
    public function rb_load($path)
    {
        return rb_load_base($path, $this);
    }
}

?>